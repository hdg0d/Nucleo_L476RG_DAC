
L476_DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004540  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080046c8  080046c8  000056c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004710  08004710  00017000  2**0
                  CONTENTS
  4 .ARM          00000008  08004710  08004710  00005710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004718  08004718  00017000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004718  08004718  00005718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800471c  0800471c  0000571c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004720  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000000c  0800472c  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  0800472c  00006158  2**0
                  ALLOC
 11 .user_data    00010000  080f0000  080f0000  00007000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .ARM.attributes 00000030  00000000  00000000  00017000  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ea69  00000000  00000000  00017030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002410  00000000  00000000  00025a99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff0  00000000  00000000  00027eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000273d9  00000000  00000000  00028ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f70  00000000  00000000  00050279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f52ff  00000000  00000000  000621e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001574e8  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 00000c39  00000000  00000000  0015752b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000042fc  00000000  00000000  00158164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  0015c460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080046b0 	.word	0x080046b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080046b0 	.word	0x080046b0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	f5ad 5d00 	sub.w	sp, sp, #8192	@ 0x2000
 80004be:	b08e      	sub	sp, #56	@ 0x38
 80004c0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	int beep_count = 3; //example variable.
 80004c2:	2303      	movs	r3, #3
 80004c4:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80004c8:	f102 0218 	add.w	r2, r2, #24
 80004cc:	6013      	str	r3, [r2, #0]
	float volume_scale = 0.05f;  // Volume control (0.0 to 1.0)
 80004ce:	4bcc      	ldr	r3, [pc, #816]	@ (8000800 <main+0x348>)
 80004d0:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80004d4:	f102 0214 	add.w	r2, r2, #20
 80004d8:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fd55 	bl	8000f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f9ff 	bl	80008e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 fb41 	bl	8000b68 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e6:	f000 fb21 	bl	8000b2c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004ea:	f000 faef 	bl	8000acc <MX_USART2_UART_Init>
  MX_DAC1_Init();
 80004ee:	f000 fa6d 	bl	80009cc <MX_DAC1_Init>
  MX_TIM4_Init();
 80004f2:	f000 fa9d 	bl	8000a30 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim4);
 80004f6:	48c3      	ldr	r0, [pc, #780]	@ (8000804 <main+0x34c>)
 80004f8:	f003 f95a 	bl	80037b0 <HAL_TIM_Base_Start>

  uint8_t *p = (uint8_t *)&__USER_DATA;
 80004fc:	4bc2      	ldr	r3, [pc, #776]	@ (8000808 <main+0x350>)
 80004fe:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8000502:	f102 0210 	add.w	r2, r2, #16
 8000506:	6013      	str	r3, [r2, #0]
  p += 4; // "RIFF"
 8000508:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 800050c:	f103 0310 	add.w	r3, r3, #16
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	3304      	adds	r3, #4
 8000514:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8000518:	f102 0210 	add.w	r2, r2, #16
 800051c:	6013      	str	r3, [r2, #0]
  p += 4; // samples
 800051e:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000522:	f103 0310 	add.w	r3, r3, #16
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	3304      	adds	r3, #4
 800052a:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 800052e:	f102 0210 	add.w	r2, r2, #16
 8000532:	6013      	str	r3, [r2, #0]
  p += 4; // "WAVE"
 8000534:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000538:	f103 0310 	add.w	r3, r3, #16
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	3304      	adds	r3, #4
 8000540:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8000544:	f102 0210 	add.w	r2, r2, #16
 8000548:	6013      	str	r3, [r2, #0]
  p += 4; // "fmt "
 800054a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 800054e:	f103 0310 	add.w	r3, r3, #16
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	3304      	adds	r3, #4
 8000556:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 800055a:	f102 0210 	add.w	r2, r2, #16
 800055e:	6013      	str	r3, [r2, #0]
  p += 4; // fmtチャンクのバイト数
 8000560:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000564:	f103 0310 	add.w	r3, r3, #16
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	3304      	adds	r3, #4
 800056c:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8000570:	f102 0210 	add.w	r2, r2, #16
 8000574:	6013      	str	r3, [r2, #0]
  p += 2; // 音声フォーマット
 8000576:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 800057a:	f103 0310 	add.w	r3, r3, #16
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	3302      	adds	r3, #2
 8000582:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8000586:	f102 0210 	add.w	r2, r2, #16
 800058a:	6013      	str	r3, [r2, #0]
  p += 2; // チャンネル数 (1を想定
 800058c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000590:	f103 0310 	add.w	r3, r3, #16
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	3302      	adds	r3, #2
 8000598:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 800059c:	f102 0210 	add.w	r2, r2, #16
 80005a0:	6013      	str	r3, [r2, #0]
  p += 4; // サンプリング周波数(Hz)
 80005a2:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80005a6:	f103 0310 	add.w	r3, r3, #16
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	3304      	adds	r3, #4
 80005ae:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80005b2:	f102 0210 	add.w	r2, r2, #16
 80005b6:	6013      	str	r3, [r2, #0]
  p += 4; // 1 秒あたりバイト数の平均 (サンプリング周波数 * ブロックサイズ)
 80005b8:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80005bc:	f103 0310 	add.w	r3, r3, #16
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	3304      	adds	r3, #4
 80005c4:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80005c8:	f102 0210 	add.w	r2, r2, #16
 80005cc:	6013      	str	r3, [r2, #0]
  p += 2; // ブロックサイズ
 80005ce:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80005d2:	f103 0310 	add.w	r3, r3, #16
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	3302      	adds	r3, #2
 80005da:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80005de:	f102 0210 	add.w	r2, r2, #16
 80005e2:	6013      	str	r3, [r2, #0]
  p += 2; // ビット／サンプル
 80005e4:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80005e8:	f103 0310 	add.w	r3, r3, #16
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	3302      	adds	r3, #2
 80005f0:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80005f4:	f102 0210 	add.w	r2, r2, #16
 80005f8:	6013      	str	r3, [r2, #0]
  p += 4; // "data"
 80005fa:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80005fe:	f103 0310 	add.w	r3, r3, #16
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	3304      	adds	r3, #4
 8000606:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 800060a:	f102 0210 	add.w	r2, r2, #16
 800060e:	6013      	str	r3, [r2, #0]

  // サブチャンクサイズ  波形データの「バイト数」
  uint32_t samples = *p + (*(p+1) * 256)  + (*(p+2) * 256 * 256)  + (*(p+3) * 256 * 256 * 256);
 8000610:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000614:	f103 0310 	add.w	r3, r3, #16
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000622:	f103 0310 	add.w	r3, r3, #16
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	3301      	adds	r3, #1
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	021b      	lsls	r3, r3, #8
 800062e:	441a      	add	r2, r3
 8000630:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000634:	f103 0310 	add.w	r3, r3, #16
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	3302      	adds	r3, #2
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	041b      	lsls	r3, r3, #16
 8000640:	441a      	add	r2, r3
 8000642:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000646:	f103 0310 	add.w	r3, r3, #16
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	3303      	adds	r3, #3
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	061b      	lsls	r3, r3, #24
 8000652:	4413      	add	r3, r2
 8000654:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8000658:	f102 020c 	add.w	r2, r2, #12
 800065c:	6013      	str	r3, [r2, #0]
  samples /= 2;
 800065e:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000662:	f103 030c 	add.w	r3, r3, #12
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	085b      	lsrs	r3, r3, #1
 800066a:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 800066e:	f102 020c 	add.w	r2, r2, #12
 8000672:	6013      	str	r3, [r2, #0]
  p += 4;
 8000674:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000678:	f103 0310 	add.w	r3, r3, #16
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	3304      	adds	r3, #4
 8000680:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8000684:	f102 0210 	add.w	r2, r2, #16
 8000688:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // ボタンが押されていたら実行
	  if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) {
 800068a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800068e:	485f      	ldr	r0, [pc, #380]	@ (800080c <main+0x354>)
 8000690:	f001 fcf8 	bl	8002084 <HAL_GPIO_ReadPin>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d1f7      	bne.n	800068a <main+0x1d2>

		  for(int i = 0; i < beep_count; i++){
 800069a:	2300      	movs	r3, #0
 800069c:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80006a0:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 80006a4:	6013      	str	r3, [r2, #0]
 80006a6:	e108      	b.n	80008ba <main+0x402>
		  // beep
		  int16_t *pp = (int16_t *)p;
 80006a8:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80006ac:	f103 0310 	add.w	r3, r3, #16
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80006b6:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80006ba:	6013      	str	r3, [r2, #0]
		  uint16_t dmaBuf[2][BUFFERSIZE];
		  int bank = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80006c2:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80006c6:	6013      	str	r3, [r2, #0]

		  flg_dma_done = 1;
 80006c8:	4b51      	ldr	r3, [pc, #324]	@ (8000810 <main+0x358>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	701a      	strb	r2, [r3, #0]
		  int count = samples;
 80006ce:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80006d2:	f103 030c 	add.w	r3, r3, #12
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80006dc:	f102 0220 	add.w	r2, r2, #32
 80006e0:	6013      	str	r3, [r2, #0]
		  while (0 < count) {
 80006e2:	e0d3      	b.n	800088c <main+0x3d4>
			  const int blksize = MIN(samples, BUFFERSIZE);
 80006e4:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80006e8:	f103 030c 	add.w	r3, r3, #12
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80006f2:	bf28      	it	cs
 80006f4:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 80006f8:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80006fc:	f102 0208 	add.w	r2, r2, #8
 8000700:	6013      	str	r3, [r2, #0]

			  // 波形を DAC出力に合わせる (振幅とオフセット)
			  for(int i=0; i< blksize; i++) {
 8000702:	2300      	movs	r3, #0
 8000704:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8000708:	f102 021c 	add.w	r2, r2, #28
 800070c:	6013      	str	r3, [r2, #0]
 800070e:	e069      	b.n	80007e4 <main+0x32c>
				  int16_t v0 = *pp;
 8000710:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000714:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	881b      	ldrh	r3, [r3, #0]
 800071c:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8000720:	f102 0206 	add.w	r2, r2, #6
 8000724:	8013      	strh	r3, [r2, #0]
				  pp++;
 8000726:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 800072a:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	3302      	adds	r3, #2
 8000732:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8000736:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800073a:	6013      	str	r3, [r2, #0]
				  int32_t v = v0;
 800073c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000740:	f103 0306 	add.w	r3, r3, #6
 8000744:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000748:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 800074c:	6013      	str	r3, [r2, #0]

				  //testing volume adjustment
				  	  // Apply volume scaling
				      v = (int32_t)(v * volume_scale);
 800074e:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	ee07 3a90 	vmov	s15, r3
 8000758:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800075c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000760:	f103 0314 	add.w	r3, r3, #20
 8000764:	edd3 7a00 	vldr	s15, [r3]
 8000768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800076c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000770:	ee17 3a90 	vmov	r3, s15
 8000774:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8000778:	6013      	str	r3, [r2, #0]
				      // Ensure the value stays within the valid DAC range (0 to 4095)
				      //v = MIN(4095, MAX(0, v));  // Clamping between 0 and 4095
				  //

				  v >>= 4;
 800077a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	111b      	asrs	r3, r3, #4
 8000782:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8000786:	6013      	str	r3, [r2, #0]
				  v += 2047;
 8000788:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000792:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8000796:	6013      	str	r3, [r2, #0]

				  dmaBuf[bank][i] = v & 0x0fff;
 8000798:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	b29b      	uxth	r3, r3
 80007a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007a4:	b299      	uxth	r1, r3
 80007a6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80007aa:	4618      	mov	r0, r3
 80007ac:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80007b0:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	02da      	lsls	r2, r3, #11
 80007b8:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80007bc:	f103 031c 	add.w	r3, r3, #28
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4413      	add	r3, r2
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	4403      	add	r3, r0
 80007c8:	460a      	mov	r2, r1
 80007ca:	f823 2c30 	strh.w	r2, [r3, #-48]
			  for(int i=0; i< blksize; i++) {
 80007ce:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80007d2:	f103 031c 	add.w	r3, r3, #28
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	3301      	adds	r3, #1
 80007da:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80007de:	f102 021c 	add.w	r2, r2, #28
 80007e2:	6013      	str	r3, [r2, #0]
 80007e4:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80007e8:	f103 031c 	add.w	r3, r3, #28
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80007f2:	f103 0308 	add.w	r3, r3, #8
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	db89      	blt.n	8000710 <main+0x258>
			  }

			  // wait for DMA complete
			  while(!flg_dma_done) {
 80007fc:	e00b      	b.n	8000816 <main+0x35e>
 80007fe:	bf00      	nop
 8000800:	3d4ccccd 	.word	0x3d4ccccd
 8000804:	20000084 	.word	0x20000084
 8000808:	080f0000 	.word	0x080f0000
 800080c:	48000800 	.word	0x48000800
 8000810:	20000150 	.word	0x20000150
				  __NOP();
 8000814:	bf00      	nop
			  while(!flg_dma_done) {
 8000816:	4b30      	ldr	r3, [pc, #192]	@ (80008d8 <main+0x420>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d0fa      	beq.n	8000814 <main+0x35c>
			  }

			  flg_dma_done = 0;
 800081e:	4b2e      	ldr	r3, [pc, #184]	@ (80008d8 <main+0x420>)
 8000820:	2200      	movs	r2, #0
 8000822:	701a      	strb	r2, [r3, #0]
			  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)dmaBuf[bank], blksize, DAC_ALIGN_12B_R);
 8000824:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000828:	3b30      	subs	r3, #48	@ 0x30
 800082a:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 800082e:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8000832:	6812      	ldr	r2, [r2, #0]
 8000834:	0312      	lsls	r2, r2, #12
 8000836:	441a      	add	r2, r3
 8000838:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 800083c:	f103 0308 	add.w	r3, r3, #8
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2100      	movs	r1, #0
 8000844:	9100      	str	r1, [sp, #0]
 8000846:	2100      	movs	r1, #0
 8000848:	4824      	ldr	r0, [pc, #144]	@ (80008dc <main+0x424>)
 800084a:	f000 fd71 	bl	8001330 <HAL_DAC_Start_DMA>

			  bank = !bank;
 800084e:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000852:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	bf0c      	ite	eq
 800085c:	2301      	moveq	r3, #1
 800085e:	2300      	movne	r3, #0
 8000860:	b2db      	uxtb	r3, r3
 8000862:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8000866:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 800086a:	6013      	str	r3, [r2, #0]
			  count -= blksize;
 800086c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000870:	f103 0320 	add.w	r3, r3, #32
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 800087a:	f103 0308 	add.w	r3, r3, #8
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8000886:	f102 0220 	add.w	r2, r2, #32
 800088a:	6013      	str	r3, [r2, #0]
		  while (0 < count) {
 800088c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000890:	f103 0320 	add.w	r3, r3, #32
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	f73f af24 	bgt.w	80006e4 <main+0x22c>
		  }

		  HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 800089c:	2100      	movs	r1, #0
 800089e:	480f      	ldr	r0, [pc, #60]	@ (80008dc <main+0x424>)
 80008a0:	f000 fe12 	bl	80014c8 <HAL_DAC_Stop_DMA>
		  for(int i = 0; i < beep_count; i++){
 80008a4:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80008a8:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	3301      	adds	r3, #1
 80008b0:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80008b4:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 80008b8:	6013      	str	r3, [r2, #0]
 80008ba:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80008be:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80008c8:	f103 0318 	add.w	r3, r3, #24
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	f6ff aeea 	blt.w	80006a8 <main+0x1f0>
	  if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) {
 80008d4:	e6d9      	b.n	800068a <main+0x1d2>
 80008d6:	bf00      	nop
 80008d8:	20000150 	.word	0x20000150
 80008dc:	20000028 	.word	0x20000028

080008e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b0b8      	sub	sp, #224	@ 0xe0
 80008e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008ea:	2244      	movs	r2, #68	@ 0x44
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f003 feb2 	bl	8004658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f4:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000904:	463b      	mov	r3, r7
 8000906:	2288      	movs	r2, #136	@ 0x88
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f003 fea4 	bl	8004658 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000910:	2302      	movs	r3, #2
 8000912:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000916:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800091a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800091e:	2310      	movs	r3, #16
 8000920:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000924:	2302      	movs	r3, #2
 8000926:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800092a:	2302      	movs	r3, #2
 800092c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000930:	2301      	movs	r3, #1
 8000932:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000936:	230a      	movs	r3, #10
 8000938:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800093c:	2307      	movs	r3, #7
 800093e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000942:	2302      	movs	r3, #2
 8000944:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000948:	2302      	movs	r3, #2
 800094a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000952:	4618      	mov	r0, r3
 8000954:	f001 fc2a 	bl	80021ac <HAL_RCC_OscConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800095e:	f000 f97b 	bl	8000c58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000962:	230f      	movs	r3, #15
 8000964:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000968:	2303      	movs	r3, #3
 800096a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800096e:	2300      	movs	r3, #0
 8000970:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800097a:	2300      	movs	r3, #0
 800097c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000980:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000984:	2104      	movs	r1, #4
 8000986:	4618      	mov	r0, r3
 8000988:	f001 fff8 	bl	800297c <HAL_RCC_ClockConfig>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000992:	f000 f961 	bl	8000c58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000996:	2302      	movs	r3, #2
 8000998:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800099a:	2300      	movs	r3, #0
 800099c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800099e:	463b      	mov	r3, r7
 80009a0:	4618      	mov	r0, r3
 80009a2:	f002 f9f1 	bl	8002d88 <HAL_RCCEx_PeriphCLKConfig>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80009ac:	f000 f954 	bl	8000c58 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009b0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009b4:	f001 fba4 	bl	8002100 <HAL_PWREx_ControlVoltageScaling>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80009be:	f000 f94b 	bl	8000c58 <Error_Handler>
  }
}
 80009c2:	bf00      	nop
 80009c4:	37e0      	adds	r7, #224	@ 0xe0
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08a      	sub	sp, #40	@ 0x28
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	2224      	movs	r2, #36	@ 0x24
 80009d6:	2100      	movs	r1, #0
 80009d8:	4618      	mov	r0, r3
 80009da:	f003 fe3d 	bl	8004658 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80009de:	4b12      	ldr	r3, [pc, #72]	@ (8000a28 <MX_DAC1_Init+0x5c>)
 80009e0:	4a12      	ldr	r2, [pc, #72]	@ (8000a2c <MX_DAC1_Init+0x60>)
 80009e2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80009e4:	4810      	ldr	r0, [pc, #64]	@ (8000a28 <MX_DAC1_Init+0x5c>)
 80009e6:	f000 fc80 	bl	80012ea <HAL_DAC_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80009f0:	f000 f932 	bl	8000c58 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 80009f8:	232c      	movs	r3, #44	@ 0x2c
 80009fa:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000a00:	2300      	movs	r3, #0
 8000a02:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4806      	ldr	r0, [pc, #24]	@ (8000a28 <MX_DAC1_Init+0x5c>)
 8000a10:	f000 fdb3 	bl	800157a <HAL_DAC_ConfigChannel>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000a1a:	f000 f91d 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	3728      	adds	r7, #40	@ 0x28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000028 	.word	0x20000028
 8000a2c:	40007400 	.word	0x40007400

08000a30 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a36:	f107 0310 	add.w	r3, r7, #16
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a4e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac4 <MX_TIM4_Init+0x94>)
 8000a50:	4a1d      	ldr	r2, [pc, #116]	@ (8000ac8 <MX_TIM4_Init+0x98>)
 8000a52:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a54:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac4 <MX_TIM4_Init+0x94>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac4 <MX_TIM4_Init+0x94>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3628;
 8000a60:	4b18      	ldr	r3, [pc, #96]	@ (8000ac4 <MX_TIM4_Init+0x94>)
 8000a62:	f640 622c 	movw	r2, #3628	@ 0xe2c
 8000a66:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a68:	4b16      	ldr	r3, [pc, #88]	@ (8000ac4 <MX_TIM4_Init+0x94>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ac4 <MX_TIM4_Init+0x94>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a74:	4813      	ldr	r0, [pc, #76]	@ (8000ac4 <MX_TIM4_Init+0x94>)
 8000a76:	f002 fe43 	bl	8003700 <HAL_TIM_Base_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000a80:	f000 f8ea 	bl	8000c58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a8a:	f107 0310 	add.w	r3, r7, #16
 8000a8e:	4619      	mov	r1, r3
 8000a90:	480c      	ldr	r0, [pc, #48]	@ (8000ac4 <MX_TIM4_Init+0x94>)
 8000a92:	f002 fef5 	bl	8003880 <HAL_TIM_ConfigClockSource>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000a9c:	f000 f8dc 	bl	8000c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000aa0:	2320      	movs	r3, #32
 8000aa2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4805      	ldr	r0, [pc, #20]	@ (8000ac4 <MX_TIM4_Init+0x94>)
 8000aae:	f003 f8e1 	bl	8003c74 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000ab8:	f000 f8ce 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000abc:	bf00      	nop
 8000abe:	3720      	adds	r7, #32
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000084 	.word	0x20000084
 8000ac8:	40000800 	.word	0x40000800

08000acc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	@ (8000b24 <MX_USART2_UART_Init+0x58>)
 8000ad2:	4a15      	ldr	r2, [pc, #84]	@ (8000b28 <MX_USART2_UART_Init+0x5c>)
 8000ad4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ad6:	4b13      	ldr	r3, [pc, #76]	@ (8000b24 <MX_USART2_UART_Init+0x58>)
 8000ad8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000adc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ade:	4b11      	ldr	r3, [pc, #68]	@ (8000b24 <MX_USART2_UART_Init+0x58>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b24 <MX_USART2_UART_Init+0x58>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	@ (8000b24 <MX_USART2_UART_Init+0x58>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b24 <MX_USART2_UART_Init+0x58>)
 8000af2:	220c      	movs	r2, #12
 8000af4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b24 <MX_USART2_UART_Init+0x58>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000afc:	4b09      	ldr	r3, [pc, #36]	@ (8000b24 <MX_USART2_UART_Init+0x58>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b02:	4b08      	ldr	r3, [pc, #32]	@ (8000b24 <MX_USART2_UART_Init+0x58>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b08:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <MX_USART2_UART_Init+0x58>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b0e:	4805      	ldr	r0, [pc, #20]	@ (8000b24 <MX_USART2_UART_Init+0x58>)
 8000b10:	f003 f938 	bl	8003d84 <HAL_UART_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b1a:	f000 f89d 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	200000d0 	.word	0x200000d0
 8000b28:	40004400 	.word	0x40004400

08000b2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b32:	4b0c      	ldr	r3, [pc, #48]	@ (8000b64 <MX_DMA_Init+0x38>)
 8000b34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b36:	4a0b      	ldr	r2, [pc, #44]	@ (8000b64 <MX_DMA_Init+0x38>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000b3e:	4b09      	ldr	r3, [pc, #36]	@ (8000b64 <MX_DMA_Init+0x38>)
 8000b40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	200d      	movs	r0, #13
 8000b50:	f000 fb95 	bl	800127e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000b54:	200d      	movs	r0, #13
 8000b56:	f000 fbae 	bl	80012b6 <HAL_NVIC_EnableIRQ>

}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40021000 	.word	0x40021000

08000b68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	@ 0x28
 8000b6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
 8000b7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7e:	4b2b      	ldr	r3, [pc, #172]	@ (8000c2c <MX_GPIO_Init+0xc4>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b82:	4a2a      	ldr	r2, [pc, #168]	@ (8000c2c <MX_GPIO_Init+0xc4>)
 8000b84:	f043 0304 	orr.w	r3, r3, #4
 8000b88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b8a:	4b28      	ldr	r3, [pc, #160]	@ (8000c2c <MX_GPIO_Init+0xc4>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8e:	f003 0304 	and.w	r3, r3, #4
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b96:	4b25      	ldr	r3, [pc, #148]	@ (8000c2c <MX_GPIO_Init+0xc4>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9a:	4a24      	ldr	r2, [pc, #144]	@ (8000c2c <MX_GPIO_Init+0xc4>)
 8000b9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ba0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ba2:	4b22      	ldr	r3, [pc, #136]	@ (8000c2c <MX_GPIO_Init+0xc4>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bae:	4b1f      	ldr	r3, [pc, #124]	@ (8000c2c <MX_GPIO_Init+0xc4>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb2:	4a1e      	ldr	r2, [pc, #120]	@ (8000c2c <MX_GPIO_Init+0xc4>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bba:	4b1c      	ldr	r3, [pc, #112]	@ (8000c2c <MX_GPIO_Init+0xc4>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	4b19      	ldr	r3, [pc, #100]	@ (8000c2c <MX_GPIO_Init+0xc4>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bca:	4a18      	ldr	r2, [pc, #96]	@ (8000c2c <MX_GPIO_Init+0xc4>)
 8000bcc:	f043 0302 	orr.w	r3, r3, #2
 8000bd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bd2:	4b16      	ldr	r3, [pc, #88]	@ (8000c2c <MX_GPIO_Init+0xc4>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2120      	movs	r1, #32
 8000be2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000be6:	f001 fa65 	bl	80020b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c30 <MX_GPIO_Init+0xc8>)
 8000bf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	480d      	ldr	r0, [pc, #52]	@ (8000c34 <MX_GPIO_Init+0xcc>)
 8000c00:	f001 f896 	bl	8001d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c04:	2320      	movs	r3, #32
 8000c06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c1e:	f001 f887 	bl	8001d30 <HAL_GPIO_Init>

}
 8000c22:	bf00      	nop
 8000c24:	3728      	adds	r7, #40	@ 0x28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	10210000 	.word	0x10210000
 8000c34:	48000800 	.word	0x48000800

08000c38 <HAL_DAC_ConvCpltCallbackCh1>:

/* USER CODE BEGIN 4 */
void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	flg_dma_done = 1;
 8000c40:	4b04      	ldr	r3, [pc, #16]	@ (8000c54 <HAL_DAC_ConvCpltCallbackCh1+0x1c>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	701a      	strb	r2, [r3, #0]
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000150 	.word	0x20000150

08000c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
	...

08000c68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cac <HAL_MspInit+0x44>)
 8000c70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c72:	4a0e      	ldr	r2, [pc, #56]	@ (8000cac <HAL_MspInit+0x44>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <HAL_MspInit+0x44>)
 8000c7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c86:	4b09      	ldr	r3, [pc, #36]	@ (8000cac <HAL_MspInit+0x44>)
 8000c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c8a:	4a08      	ldr	r2, [pc, #32]	@ (8000cac <HAL_MspInit+0x44>)
 8000c8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c90:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c92:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <HAL_MspInit+0x44>)
 8000c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c9a:	603b      	str	r3, [r7, #0]
 8000c9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	40021000 	.word	0x40021000

08000cb0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	@ 0x28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a2b      	ldr	r2, [pc, #172]	@ (8000d7c <HAL_DAC_MspInit+0xcc>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d14f      	bne.n	8000d72 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000cd2:	4b2b      	ldr	r3, [pc, #172]	@ (8000d80 <HAL_DAC_MspInit+0xd0>)
 8000cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cd6:	4a2a      	ldr	r2, [pc, #168]	@ (8000d80 <HAL_DAC_MspInit+0xd0>)
 8000cd8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000cdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cde:	4b28      	ldr	r3, [pc, #160]	@ (8000d80 <HAL_DAC_MspInit+0xd0>)
 8000ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ce2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	4b25      	ldr	r3, [pc, #148]	@ (8000d80 <HAL_DAC_MspInit+0xd0>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cee:	4a24      	ldr	r2, [pc, #144]	@ (8000d80 <HAL_DAC_MspInit+0xd0>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cf6:	4b22      	ldr	r3, [pc, #136]	@ (8000d80 <HAL_DAC_MspInit+0xd0>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d02:	2310      	movs	r3, #16
 8000d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d06:	2303      	movs	r3, #3
 8000d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	4619      	mov	r1, r3
 8000d14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d18:	f001 f80a 	bl	8001d30 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8000d1c:	4b19      	ldr	r3, [pc, #100]	@ (8000d84 <HAL_DAC_MspInit+0xd4>)
 8000d1e:	4a1a      	ldr	r2, [pc, #104]	@ (8000d88 <HAL_DAC_MspInit+0xd8>)
 8000d20:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8000d22:	4b18      	ldr	r3, [pc, #96]	@ (8000d84 <HAL_DAC_MspInit+0xd4>)
 8000d24:	2206      	movs	r2, #6
 8000d26:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d28:	4b16      	ldr	r3, [pc, #88]	@ (8000d84 <HAL_DAC_MspInit+0xd4>)
 8000d2a:	2210      	movs	r2, #16
 8000d2c:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d2e:	4b15      	ldr	r3, [pc, #84]	@ (8000d84 <HAL_DAC_MspInit+0xd4>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000d34:	4b13      	ldr	r3, [pc, #76]	@ (8000d84 <HAL_DAC_MspInit+0xd4>)
 8000d36:	2280      	movs	r2, #128	@ 0x80
 8000d38:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d3a:	4b12      	ldr	r3, [pc, #72]	@ (8000d84 <HAL_DAC_MspInit+0xd4>)
 8000d3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d40:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d42:	4b10      	ldr	r3, [pc, #64]	@ (8000d84 <HAL_DAC_MspInit+0xd4>)
 8000d44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d48:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_NORMAL;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d84 <HAL_DAC_MspInit+0xd4>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	@ (8000d84 <HAL_DAC_MspInit+0xd4>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8000d56:	480b      	ldr	r0, [pc, #44]	@ (8000d84 <HAL_DAC_MspInit+0xd4>)
 8000d58:	f000 fdb4 	bl	80018c4 <HAL_DMA_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000d62:	f7ff ff79 	bl	8000c58 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a06      	ldr	r2, [pc, #24]	@ (8000d84 <HAL_DAC_MspInit+0xd4>)
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	4a05      	ldr	r2, [pc, #20]	@ (8000d84 <HAL_DAC_MspInit+0xd4>)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000d72:	bf00      	nop
 8000d74:	3728      	adds	r7, #40	@ 0x28
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40007400 	.word	0x40007400
 8000d80:	40021000 	.word	0x40021000
 8000d84:	2000003c 	.word	0x2000003c
 8000d88:	40020030 	.word	0x40020030

08000d8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc4 <HAL_TIM_Base_MspInit+0x38>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d10b      	bne.n	8000db6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc8 <HAL_TIM_Base_MspInit+0x3c>)
 8000da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000da2:	4a09      	ldr	r2, [pc, #36]	@ (8000dc8 <HAL_TIM_Base_MspInit+0x3c>)
 8000da4:	f043 0304 	orr.w	r3, r3, #4
 8000da8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000daa:	4b07      	ldr	r3, [pc, #28]	@ (8000dc8 <HAL_TIM_Base_MspInit+0x3c>)
 8000dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dae:	f003 0304 	and.w	r3, r3, #4
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000db6:	bf00      	nop
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40000800 	.word	0x40000800
 8000dc8:	40021000 	.word	0x40021000

08000dcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	@ 0x28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a17      	ldr	r2, [pc, #92]	@ (8000e48 <HAL_UART_MspInit+0x7c>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d128      	bne.n	8000e40 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dee:	4b17      	ldr	r3, [pc, #92]	@ (8000e4c <HAL_UART_MspInit+0x80>)
 8000df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df2:	4a16      	ldr	r2, [pc, #88]	@ (8000e4c <HAL_UART_MspInit+0x80>)
 8000df4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000df8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dfa:	4b14      	ldr	r3, [pc, #80]	@ (8000e4c <HAL_UART_MspInit+0x80>)
 8000dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	4b11      	ldr	r3, [pc, #68]	@ (8000e4c <HAL_UART_MspInit+0x80>)
 8000e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0a:	4a10      	ldr	r2, [pc, #64]	@ (8000e4c <HAL_UART_MspInit+0x80>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e12:	4b0e      	ldr	r3, [pc, #56]	@ (8000e4c <HAL_UART_MspInit+0x80>)
 8000e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e1e:	230c      	movs	r3, #12
 8000e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e2e:	2307      	movs	r3, #7
 8000e30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	4619      	mov	r1, r3
 8000e38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e3c:	f000 ff78 	bl	8001d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e40:	bf00      	nop
 8000e42:	3728      	adds	r7, #40	@ 0x28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40004400 	.word	0x40004400
 8000e4c:	40021000 	.word	0x40021000

08000e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e62:	bf00      	nop
 8000e64:	e7fd      	b.n	8000e62 <HardFault_Handler+0x4>

08000e66 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e6a:	bf00      	nop
 8000e6c:	e7fd      	b.n	8000e6a <MemManage_Handler+0x4>

08000e6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e72:	bf00      	nop
 8000e74:	e7fd      	b.n	8000e72 <BusFault_Handler+0x4>

08000e76 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e7a:	bf00      	nop
 8000e7c:	e7fd      	b.n	8000e7a <UsageFault_Handler+0x4>

08000e7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eac:	f000 f8c8 	bl	8001040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8000eb8:	4802      	ldr	r0, [pc, #8]	@ (8000ec4 <DMA1_Channel3_IRQHandler+0x10>)
 8000eba:	f000 fe59 	bl	8001b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	2000003c 	.word	0x2000003c

08000ec8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ecc:	4b17      	ldr	r3, [pc, #92]	@ (8000f2c <SystemInit+0x64>)
 8000ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ed2:	4a16      	ldr	r2, [pc, #88]	@ (8000f2c <SystemInit+0x64>)
 8000ed4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ed8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000edc:	4b14      	ldr	r3, [pc, #80]	@ (8000f30 <SystemInit+0x68>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a13      	ldr	r2, [pc, #76]	@ (8000f30 <SystemInit+0x68>)
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ee8:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <SystemInit+0x68>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000eee:	4b10      	ldr	r3, [pc, #64]	@ (8000f30 <SystemInit+0x68>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a0f      	ldr	r2, [pc, #60]	@ (8000f30 <SystemInit+0x68>)
 8000ef4:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000ef8:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000efc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000efe:	4b0c      	ldr	r3, [pc, #48]	@ (8000f30 <SystemInit+0x68>)
 8000f00:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f04:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f06:	4b0a      	ldr	r3, [pc, #40]	@ (8000f30 <SystemInit+0x68>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a09      	ldr	r2, [pc, #36]	@ (8000f30 <SystemInit+0x68>)
 8000f0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f10:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000f12:	4b07      	ldr	r3, [pc, #28]	@ (8000f30 <SystemInit+0x68>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f18:	4b04      	ldr	r3, [pc, #16]	@ (8000f2c <SystemInit+0x64>)
 8000f1a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000f1e:	609a      	str	r2, [r3, #8]
#endif
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000ed00 	.word	0xe000ed00
 8000f30:	40021000 	.word	0x40021000

08000f34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f6c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f38:	f7ff ffc6 	bl	8000ec8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f3c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f3e:	e003      	b.n	8000f48 <LoopCopyDataInit>

08000f40 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f40:	4b0b      	ldr	r3, [pc, #44]	@ (8000f70 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f42:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f44:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f46:	3104      	adds	r1, #4

08000f48 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f48:	480a      	ldr	r0, [pc, #40]	@ (8000f74 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f78 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f4c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f4e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f50:	d3f6      	bcc.n	8000f40 <CopyDataInit>
	ldr	r2, =_sbss
 8000f52:	4a0a      	ldr	r2, [pc, #40]	@ (8000f7c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f54:	e002      	b.n	8000f5c <LoopFillZerobss>

08000f56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f56:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f58:	f842 3b04 	str.w	r3, [r2], #4

08000f5c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f5c:	4b08      	ldr	r3, [pc, #32]	@ (8000f80 <LoopForever+0x16>)
	cmp	r2, r3
 8000f5e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f60:	d3f9      	bcc.n	8000f56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f62:	f003 fb81 	bl	8004668 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f66:	f7ff faa7 	bl	80004b8 <main>

08000f6a <LoopForever>:

LoopForever:
    b LoopForever
 8000f6a:	e7fe      	b.n	8000f6a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f6c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000f70:	08004720 	.word	0x08004720
	ldr	r0, =_sdata
 8000f74:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f78:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000f7c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000f80:	20000158 	.word	0x20000158

08000f84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f84:	e7fe      	b.n	8000f84 <ADC1_2_IRQHandler>
	...

08000f88 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f92:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <HAL_Init+0x3c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a0b      	ldr	r2, [pc, #44]	@ (8000fc4 <HAL_Init+0x3c>)
 8000f98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f9c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f9e:	2003      	movs	r0, #3
 8000fa0:	f000 f962 	bl	8001268 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f000 f80f 	bl	8000fc8 <HAL_InitTick>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d002      	beq.n	8000fb6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	71fb      	strb	r3, [r7, #7]
 8000fb4:	e001      	b.n	8000fba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fb6:	f7ff fe57 	bl	8000c68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fba:	79fb      	ldrb	r3, [r7, #7]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40022000 	.word	0x40022000

08000fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fd4:	4b17      	ldr	r3, [pc, #92]	@ (8001034 <HAL_InitTick+0x6c>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d023      	beq.n	8001024 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fdc:	4b16      	ldr	r3, [pc, #88]	@ (8001038 <HAL_InitTick+0x70>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b14      	ldr	r3, [pc, #80]	@ (8001034 <HAL_InitTick+0x6c>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f96d 	bl	80012d2 <HAL_SYSTICK_Config>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d10f      	bne.n	800101e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b0f      	cmp	r3, #15
 8001002:	d809      	bhi.n	8001018 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001004:	2200      	movs	r2, #0
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	f04f 30ff 	mov.w	r0, #4294967295
 800100c:	f000 f937 	bl	800127e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001010:	4a0a      	ldr	r2, [pc, #40]	@ (800103c <HAL_InitTick+0x74>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6013      	str	r3, [r2, #0]
 8001016:	e007      	b.n	8001028 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	73fb      	strb	r3, [r7, #15]
 800101c:	e004      	b.n	8001028 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	73fb      	strb	r3, [r7, #15]
 8001022:	e001      	b.n	8001028 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001028:	7bfb      	ldrb	r3, [r7, #15]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000008 	.word	0x20000008
 8001038:	20000000 	.word	0x20000000
 800103c:	20000004 	.word	0x20000004

08001040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001044:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <HAL_IncTick+0x20>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <HAL_IncTick+0x24>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4413      	add	r3, r2
 8001050:	4a04      	ldr	r2, [pc, #16]	@ (8001064 <HAL_IncTick+0x24>)
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000008 	.word	0x20000008
 8001064:	20000154 	.word	0x20000154

08001068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return uwTick;
 800106c:	4b03      	ldr	r3, [pc, #12]	@ (800107c <HAL_GetTick+0x14>)
 800106e:	681b      	ldr	r3, [r3, #0]
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000154 	.word	0x20000154

08001080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001088:	f7ff ffee 	bl	8001068 <HAL_GetTick>
 800108c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001098:	d005      	beq.n	80010a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800109a:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <HAL_Delay+0x44>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4413      	add	r3, r2
 80010a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010a6:	bf00      	nop
 80010a8:	f7ff ffde 	bl	8001068 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d8f7      	bhi.n	80010a8 <HAL_Delay+0x28>
  {
  }
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000008 	.word	0x20000008

080010c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d8:	4b0c      	ldr	r3, [pc, #48]	@ (800110c <__NVIC_SetPriorityGrouping+0x44>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010e4:	4013      	ands	r3, r2
 80010e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fa:	4a04      	ldr	r2, [pc, #16]	@ (800110c <__NVIC_SetPriorityGrouping+0x44>)
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	60d3      	str	r3, [r2, #12]
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001114:	4b04      	ldr	r3, [pc, #16]	@ (8001128 <__NVIC_GetPriorityGrouping+0x18>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	0a1b      	lsrs	r3, r3, #8
 800111a:	f003 0307 	and.w	r3, r3, #7
}
 800111e:	4618      	mov	r0, r3
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	2b00      	cmp	r3, #0
 800113c:	db0b      	blt.n	8001156 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	f003 021f 	and.w	r2, r3, #31
 8001144:	4907      	ldr	r1, [pc, #28]	@ (8001164 <__NVIC_EnableIRQ+0x38>)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	095b      	lsrs	r3, r3, #5
 800114c:	2001      	movs	r0, #1
 800114e:	fa00 f202 	lsl.w	r2, r0, r2
 8001152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000e100 	.word	0xe000e100

08001168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001178:	2b00      	cmp	r3, #0
 800117a:	db0a      	blt.n	8001192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	b2da      	uxtb	r2, r3
 8001180:	490c      	ldr	r1, [pc, #48]	@ (80011b4 <__NVIC_SetPriority+0x4c>)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	0112      	lsls	r2, r2, #4
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	440b      	add	r3, r1
 800118c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001190:	e00a      	b.n	80011a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4908      	ldr	r1, [pc, #32]	@ (80011b8 <__NVIC_SetPriority+0x50>)
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	3b04      	subs	r3, #4
 80011a0:	0112      	lsls	r2, r2, #4
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	440b      	add	r3, r1
 80011a6:	761a      	strb	r2, [r3, #24]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000e100 	.word	0xe000e100
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b089      	sub	sp, #36	@ 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f1c3 0307 	rsb	r3, r3, #7
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	bf28      	it	cs
 80011da:	2304      	movcs	r3, #4
 80011dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3304      	adds	r3, #4
 80011e2:	2b06      	cmp	r3, #6
 80011e4:	d902      	bls.n	80011ec <NVIC_EncodePriority+0x30>
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3b03      	subs	r3, #3
 80011ea:	e000      	b.n	80011ee <NVIC_EncodePriority+0x32>
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	f04f 32ff 	mov.w	r2, #4294967295
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43da      	mvns	r2, r3
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	401a      	ands	r2, r3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001204:	f04f 31ff 	mov.w	r1, #4294967295
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	fa01 f303 	lsl.w	r3, r1, r3
 800120e:	43d9      	mvns	r1, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	4313      	orrs	r3, r2
         );
}
 8001216:	4618      	mov	r0, r3
 8001218:	3724      	adds	r7, #36	@ 0x24
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3b01      	subs	r3, #1
 8001230:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001234:	d301      	bcc.n	800123a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001236:	2301      	movs	r3, #1
 8001238:	e00f      	b.n	800125a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123a:	4a0a      	ldr	r2, [pc, #40]	@ (8001264 <SysTick_Config+0x40>)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3b01      	subs	r3, #1
 8001240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001242:	210f      	movs	r1, #15
 8001244:	f04f 30ff 	mov.w	r0, #4294967295
 8001248:	f7ff ff8e 	bl	8001168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800124c:	4b05      	ldr	r3, [pc, #20]	@ (8001264 <SysTick_Config+0x40>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001252:	4b04      	ldr	r3, [pc, #16]	@ (8001264 <SysTick_Config+0x40>)
 8001254:	2207      	movs	r2, #7
 8001256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	e000e010 	.word	0xe000e010

08001268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff ff29 	bl	80010c8 <__NVIC_SetPriorityGrouping>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b086      	sub	sp, #24
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
 800128a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001290:	f7ff ff3e 	bl	8001110 <__NVIC_GetPriorityGrouping>
 8001294:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	68b9      	ldr	r1, [r7, #8]
 800129a:	6978      	ldr	r0, [r7, #20]
 800129c:	f7ff ff8e 	bl	80011bc <NVIC_EncodePriority>
 80012a0:	4602      	mov	r2, r0
 80012a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a6:	4611      	mov	r1, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff5d 	bl	8001168 <__NVIC_SetPriority>
}
 80012ae:	bf00      	nop
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff31 	bl	800112c <__NVIC_EnableIRQ>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff ffa2 	bl	8001224 <SysTick_Config>
 80012e0:	4603      	mov	r3, r0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d101      	bne.n	80012fc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e014      	b.n	8001326 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	791b      	ldrb	r3, [r3, #4]
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d105      	bne.n	8001312 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff fccf 	bl	8000cb0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2202      	movs	r2, #2
 8001316:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2201      	movs	r2, #1
 8001322:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
 800133c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	795b      	ldrb	r3, [r3, #5]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d101      	bne.n	800134e <HAL_DAC_Start_DMA+0x1e>
 800134a:	2302      	movs	r3, #2
 800134c:	e0ab      	b.n	80014a6 <HAL_DAC_Start_DMA+0x176>
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2201      	movs	r2, #1
 8001352:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2202      	movs	r2, #2
 8001358:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d12f      	bne.n	80013c0 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	4a52      	ldr	r2, [pc, #328]	@ (80014b0 <HAL_DAC_Start_DMA+0x180>)
 8001366:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	4a51      	ldr	r2, [pc, #324]	@ (80014b4 <HAL_DAC_Start_DMA+0x184>)
 800136e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	4a50      	ldr	r2, [pc, #320]	@ (80014b8 <HAL_DAC_Start_DMA+0x188>)
 8001376:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001386:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001388:	6a3b      	ldr	r3, [r7, #32]
 800138a:	2b08      	cmp	r3, #8
 800138c:	d013      	beq.n	80013b6 <HAL_DAC_Start_DMA+0x86>
 800138e:	6a3b      	ldr	r3, [r7, #32]
 8001390:	2b08      	cmp	r3, #8
 8001392:	d845      	bhi.n	8001420 <HAL_DAC_Start_DMA+0xf0>
 8001394:	6a3b      	ldr	r3, [r7, #32]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_DAC_Start_DMA+0x72>
 800139a:	6a3b      	ldr	r3, [r7, #32]
 800139c:	2b04      	cmp	r3, #4
 800139e:	d005      	beq.n	80013ac <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80013a0:	e03e      	b.n	8001420 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	3308      	adds	r3, #8
 80013a8:	613b      	str	r3, [r7, #16]
        break;
 80013aa:	e03c      	b.n	8001426 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	330c      	adds	r3, #12
 80013b2:	613b      	str	r3, [r7, #16]
        break;
 80013b4:	e037      	b.n	8001426 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	3310      	adds	r3, #16
 80013bc:	613b      	str	r3, [r7, #16]
        break;
 80013be:	e032      	b.n	8001426 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	4a3d      	ldr	r2, [pc, #244]	@ (80014bc <HAL_DAC_Start_DMA+0x18c>)
 80013c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	4a3c      	ldr	r2, [pc, #240]	@ (80014c0 <HAL_DAC_Start_DMA+0x190>)
 80013ce:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	4a3b      	ldr	r2, [pc, #236]	@ (80014c4 <HAL_DAC_Start_DMA+0x194>)
 80013d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80013e6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80013e8:	6a3b      	ldr	r3, [r7, #32]
 80013ea:	2b08      	cmp	r3, #8
 80013ec:	d013      	beq.n	8001416 <HAL_DAC_Start_DMA+0xe6>
 80013ee:	6a3b      	ldr	r3, [r7, #32]
 80013f0:	2b08      	cmp	r3, #8
 80013f2:	d817      	bhi.n	8001424 <HAL_DAC_Start_DMA+0xf4>
 80013f4:	6a3b      	ldr	r3, [r7, #32]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_DAC_Start_DMA+0xd2>
 80013fa:	6a3b      	ldr	r3, [r7, #32]
 80013fc:	2b04      	cmp	r3, #4
 80013fe:	d005      	beq.n	800140c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001400:	e010      	b.n	8001424 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	3314      	adds	r3, #20
 8001408:	613b      	str	r3, [r7, #16]
        break;
 800140a:	e00c      	b.n	8001426 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	3318      	adds	r3, #24
 8001412:	613b      	str	r3, [r7, #16]
        break;
 8001414:	e007      	b.n	8001426 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	331c      	adds	r3, #28
 800141c:	613b      	str	r3, [r7, #16]
        break;
 800141e:	e002      	b.n	8001426 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001420:	bf00      	nop
 8001422:	e000      	b.n	8001426 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001424:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d111      	bne.n	8001450 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800143a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	6898      	ldr	r0, [r3, #8]
 8001440:	6879      	ldr	r1, [r7, #4]
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	f000 faf5 	bl	8001a34 <HAL_DMA_Start_IT>
 800144a:	4603      	mov	r3, r0
 800144c:	75fb      	strb	r3, [r7, #23]
 800144e:	e010      	b.n	8001472 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800145e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	68d8      	ldr	r0, [r3, #12]
 8001464:	6879      	ldr	r1, [r7, #4]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	f000 fae3 	bl	8001a34 <HAL_DMA_Start_IT>
 800146e:	4603      	mov	r3, r0
 8001470:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2200      	movs	r2, #0
 8001476:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001478:	7dfb      	ldrb	r3, [r7, #23]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10c      	bne.n	8001498 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6819      	ldr	r1, [r3, #0]
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	f003 0310 	and.w	r3, r3, #16
 800148a:	2201      	movs	r2, #1
 800148c:	409a      	lsls	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	e005      	b.n	80014a4 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	f043 0204 	orr.w	r2, r3, #4
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80014a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	080017af 	.word	0x080017af
 80014b4:	080017d1 	.word	0x080017d1
 80014b8:	080017ed 	.word	0x080017ed
 80014bc:	08001857 	.word	0x08001857
 80014c0:	08001879 	.word	0x08001879
 80014c4:	08001895 	.word	0x08001895

080014c8 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6819      	ldr	r1, [r3, #0]
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	f003 0310 	and.w	r3, r3, #16
 80014de:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43da      	mvns	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	400a      	ands	r2, r1
 80014ee:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6819      	ldr	r1, [r3, #0]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	f003 0310 	and.w	r3, r3, #16
 80014fc:	2201      	movs	r2, #1
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43da      	mvns	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	400a      	ands	r2, r1
 800150a:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d10d      	bne.n	800152e <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	4618      	mov	r0, r3
 8001518:	f000 faec 	bl	8001af4 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	e00c      	b.n	8001548 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	4618      	mov	r0, r3
 8001534:	f000 fade 	bl	8001af4 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8001546:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b088      	sub	sp, #32
 800157e:	af00      	add	r7, sp, #0
 8001580:	60f8      	str	r0, [r7, #12]
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	795b      	ldrb	r3, [r3, #5]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d101      	bne.n	8001596 <HAL_DAC_ConfigChannel+0x1c>
 8001592:	2302      	movs	r3, #2
 8001594:	e107      	b.n	80017a6 <HAL_DAC_ConfigChannel+0x22c>
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2201      	movs	r2, #1
 800159a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2202      	movs	r2, #2
 80015a0:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	d174      	bne.n	8001694 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80015aa:	f7ff fd5d 	bl	8001068 <HAL_GetTick>
 80015ae:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d134      	bne.n	8001620 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80015b6:	e011      	b.n	80015dc <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80015b8:	f7ff fd56 	bl	8001068 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d90a      	bls.n	80015dc <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	f043 0208 	orr.w	r2, r3, #8
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2203      	movs	r2, #3
 80015d6:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e0e4      	b.n	80017a6 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1e6      	bne.n	80015b8 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80015ea:	2001      	movs	r0, #1
 80015ec:	f7ff fd48 	bl	8001080 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68ba      	ldr	r2, [r7, #8]
 80015f6:	6992      	ldr	r2, [r2, #24]
 80015f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80015fa:	e01e      	b.n	800163a <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80015fc:	f7ff fd34 	bl	8001068 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b01      	cmp	r3, #1
 8001608:	d90a      	bls.n	8001620 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	f043 0208 	orr.w	r2, r3, #8
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2203      	movs	r2, #3
 800161a:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e0c2      	b.n	80017a6 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001626:	2b00      	cmp	r3, #0
 8001628:	dbe8      	blt.n	80015fc <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800162a:	2001      	movs	r0, #1
 800162c:	f7ff fd28 	bl	8001080 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68ba      	ldr	r2, [r7, #8]
 8001636:	6992      	ldr	r2, [r2, #24]
 8001638:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f003 0310 	and.w	r3, r3, #16
 8001646:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800164a:	fa01 f303 	lsl.w	r3, r1, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	ea02 0103 	and.w	r1, r2, r3
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	69da      	ldr	r2, [r3, #28]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f003 0310 	and.w	r3, r3, #16
 800165e:	409a      	lsls	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f003 0310 	and.w	r3, r3, #16
 8001674:	21ff      	movs	r1, #255	@ 0xff
 8001676:	fa01 f303 	lsl.w	r3, r1, r3
 800167a:	43db      	mvns	r3, r3
 800167c:	ea02 0103 	and.w	r1, r2, r3
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	6a1a      	ldr	r2, [r3, #32]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f003 0310 	and.w	r3, r3, #16
 800168a:	409a      	lsls	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	430a      	orrs	r2, r1
 8001692:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d11d      	bne.n	80016d8 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016a2:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f003 0310 	and.w	r3, r3, #16
 80016aa:	221f      	movs	r2, #31
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f003 0310 	and.w	r3, r3, #16
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016de:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f003 0310 	and.w	r3, r3, #16
 80016e6:	2207      	movs	r2, #7
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	431a      	orrs	r2, r3
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	4313      	orrs	r3, r2
 8001704:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f003 0310 	and.w	r3, r3, #16
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4313      	orrs	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6819      	ldr	r1, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f003 0310 	and.w	r3, r3, #16
 800172c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43da      	mvns	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	400a      	ands	r2, r1
 800173c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f003 0310 	and.w	r3, r3, #16
 800174c:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4013      	ands	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f003 0310 	and.w	r3, r3, #16
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4313      	orrs	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6819      	ldr	r1, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f003 0310 	and.w	r3, r3, #16
 8001788:	22c0      	movs	r2, #192	@ 0xc0
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43da      	mvns	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	400a      	ands	r2, r1
 8001796:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2201      	movs	r2, #1
 800179c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2200      	movs	r2, #0
 80017a2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3720      	adds	r7, #32
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b084      	sub	sp, #16
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ba:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f7ff fa3b 	bl	8000c38 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2201      	movs	r2, #1
 80017c6:	711a      	strb	r2, [r3, #4]
}
 80017c8:	bf00      	nop
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017dc:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	f7ff feb7 	bl	8001552 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80017e4:	bf00      	nop
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f8:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	f043 0204 	orr.w	r2, r3, #4
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001806:	68f8      	ldr	r0, [r7, #12]
 8001808:	f7ff fead 	bl	8001566 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2201      	movs	r2, #1
 8001810:	711a      	strb	r2, [r3, #4]
}
 8001812:	bf00      	nop
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b084      	sub	sp, #16
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001862:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001864:	68f8      	ldr	r0, [r7, #12]
 8001866:	f7ff ffd8 	bl	800181a <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2201      	movs	r2, #1
 800186e:	711a      	strb	r2, [r3, #4]
}
 8001870:	bf00      	nop
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001884:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f7ff ffd1 	bl	800182e <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800188c:	bf00      	nop
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a0:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	f043 0204 	orr.w	r2, r3, #4
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f7ff ffc7 	bl	8001842 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2201      	movs	r2, #1
 80018b8:	711a      	strb	r2, [r3, #4]
}
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
	...

080018c4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e098      	b.n	8001a08 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	461a      	mov	r2, r3
 80018dc:	4b4d      	ldr	r3, [pc, #308]	@ (8001a14 <HAL_DMA_Init+0x150>)
 80018de:	429a      	cmp	r2, r3
 80018e0:	d80f      	bhi.n	8001902 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	461a      	mov	r2, r3
 80018e8:	4b4b      	ldr	r3, [pc, #300]	@ (8001a18 <HAL_DMA_Init+0x154>)
 80018ea:	4413      	add	r3, r2
 80018ec:	4a4b      	ldr	r2, [pc, #300]	@ (8001a1c <HAL_DMA_Init+0x158>)
 80018ee:	fba2 2303 	umull	r2, r3, r2, r3
 80018f2:	091b      	lsrs	r3, r3, #4
 80018f4:	009a      	lsls	r2, r3, #2
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a48      	ldr	r2, [pc, #288]	@ (8001a20 <HAL_DMA_Init+0x15c>)
 80018fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8001900:	e00e      	b.n	8001920 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	4b46      	ldr	r3, [pc, #280]	@ (8001a24 <HAL_DMA_Init+0x160>)
 800190a:	4413      	add	r3, r2
 800190c:	4a43      	ldr	r2, [pc, #268]	@ (8001a1c <HAL_DMA_Init+0x158>)
 800190e:	fba2 2303 	umull	r2, r3, r2, r3
 8001912:	091b      	lsrs	r3, r3, #4
 8001914:	009a      	lsls	r2, r3, #2
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a42      	ldr	r2, [pc, #264]	@ (8001a28 <HAL_DMA_Init+0x164>)
 800191e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2202      	movs	r2, #2
 8001924:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001936:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800193a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001944:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001950:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800195c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a1b      	ldr	r3, [r3, #32]
 8001962:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	4313      	orrs	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800197a:	d039      	beq.n	80019f0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001980:	4a27      	ldr	r2, [pc, #156]	@ (8001a20 <HAL_DMA_Init+0x15c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d11a      	bne.n	80019bc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001986:	4b29      	ldr	r3, [pc, #164]	@ (8001a2c <HAL_DMA_Init+0x168>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198e:	f003 031c 	and.w	r3, r3, #28
 8001992:	210f      	movs	r1, #15
 8001994:	fa01 f303 	lsl.w	r3, r1, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	4924      	ldr	r1, [pc, #144]	@ (8001a2c <HAL_DMA_Init+0x168>)
 800199c:	4013      	ands	r3, r2
 800199e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80019a0:	4b22      	ldr	r3, [pc, #136]	@ (8001a2c <HAL_DMA_Init+0x168>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6859      	ldr	r1, [r3, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ac:	f003 031c 	and.w	r3, r3, #28
 80019b0:	fa01 f303 	lsl.w	r3, r1, r3
 80019b4:	491d      	ldr	r1, [pc, #116]	@ (8001a2c <HAL_DMA_Init+0x168>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	600b      	str	r3, [r1, #0]
 80019ba:	e019      	b.n	80019f0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80019bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001a30 <HAL_DMA_Init+0x16c>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c4:	f003 031c 	and.w	r3, r3, #28
 80019c8:	210f      	movs	r1, #15
 80019ca:	fa01 f303 	lsl.w	r3, r1, r3
 80019ce:	43db      	mvns	r3, r3
 80019d0:	4917      	ldr	r1, [pc, #92]	@ (8001a30 <HAL_DMA_Init+0x16c>)
 80019d2:	4013      	ands	r3, r2
 80019d4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80019d6:	4b16      	ldr	r3, [pc, #88]	@ (8001a30 <HAL_DMA_Init+0x16c>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6859      	ldr	r1, [r3, #4]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e2:	f003 031c 	and.w	r3, r3, #28
 80019e6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ea:	4911      	ldr	r1, [pc, #68]	@ (8001a30 <HAL_DMA_Init+0x16c>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	40020407 	.word	0x40020407
 8001a18:	bffdfff8 	.word	0xbffdfff8
 8001a1c:	cccccccd 	.word	0xcccccccd
 8001a20:	40020000 	.word	0x40020000
 8001a24:	bffdfbf8 	.word	0xbffdfbf8
 8001a28:	40020400 	.word	0x40020400
 8001a2c:	400200a8 	.word	0x400200a8
 8001a30:	400204a8 	.word	0x400204a8

08001a34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
 8001a40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <HAL_DMA_Start_IT+0x20>
 8001a50:	2302      	movs	r3, #2
 8001a52:	e04b      	b.n	8001aec <HAL_DMA_Start_IT+0xb8>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d13a      	bne.n	8001ade <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2200      	movs	r2, #0
 8001a74:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 0201 	bic.w	r2, r2, #1
 8001a84:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	68b9      	ldr	r1, [r7, #8]
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f000 f91e 	bl	8001cce <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d008      	beq.n	8001aac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f042 020e 	orr.w	r2, r2, #14
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	e00f      	b.n	8001acc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f022 0204 	bic.w	r2, r2, #4
 8001aba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 020a 	orr.w	r2, r2, #10
 8001aca:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f042 0201 	orr.w	r2, r2, #1
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	e005      	b.n	8001aea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001afc:	2300      	movs	r3, #0
 8001afe:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d008      	beq.n	8001b1e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2204      	movs	r2, #4
 8001b10:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e022      	b.n	8001b64 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 020e 	bic.w	r2, r2, #14
 8001b2c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0201 	bic.w	r2, r2, #1
 8001b3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b42:	f003 021c 	and.w	r2, r3, #28
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b50:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8c:	f003 031c 	and.w	r3, r3, #28
 8001b90:	2204      	movs	r2, #4
 8001b92:	409a      	lsls	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4013      	ands	r3, r2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d026      	beq.n	8001bea <HAL_DMA_IRQHandler+0x7a>
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d021      	beq.n	8001bea <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0320 	and.w	r3, r3, #32
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d107      	bne.n	8001bc4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 0204 	bic.w	r2, r2, #4
 8001bc2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc8:	f003 021c 	and.w	r2, r3, #28
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd0:	2104      	movs	r1, #4
 8001bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d071      	beq.n	8001cc4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001be8:	e06c      	b.n	8001cc4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bee:	f003 031c 	and.w	r3, r3, #28
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	409a      	lsls	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d02e      	beq.n	8001c5c <HAL_DMA_IRQHandler+0xec>
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d029      	beq.n	8001c5c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0320 	and.w	r3, r3, #32
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10b      	bne.n	8001c2e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 020a 	bic.w	r2, r2, #10
 8001c24:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c32:	f003 021c 	and.w	r2, r3, #28
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3a:	2102      	movs	r1, #2
 8001c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c40:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if(hdma->XferCpltCallback != NULL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d038      	beq.n	8001cc4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c5a:	e033      	b.n	8001cc4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c60:	f003 031c 	and.w	r3, r3, #28
 8001c64:	2208      	movs	r2, #8
 8001c66:	409a      	lsls	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d02a      	beq.n	8001cc6 <HAL_DMA_IRQHandler+0x156>
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d025      	beq.n	8001cc6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 020e 	bic.w	r2, r2, #14
 8001c88:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8e:	f003 021c 	and.w	r2, r3, #28
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c96:	2101      	movs	r1, #1
 8001c98:	fa01 f202 	lsl.w	r2, r1, r2
 8001c9c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d004      	beq.n	8001cc6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001cc4:	bf00      	nop
 8001cc6:	bf00      	nop
}
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b085      	sub	sp, #20
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	60f8      	str	r0, [r7, #12]
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	607a      	str	r2, [r7, #4]
 8001cda:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce0:	f003 021c 	and.w	r2, r3, #28
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce8:	2101      	movs	r1, #1
 8001cea:	fa01 f202 	lsl.w	r2, r1, r2
 8001cee:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	2b10      	cmp	r3, #16
 8001cfe:	d108      	bne.n	8001d12 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68ba      	ldr	r2, [r7, #8]
 8001d0e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d10:	e007      	b.n	8001d22 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	60da      	str	r2, [r3, #12]
}
 8001d22:	bf00      	nop
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
	...

08001d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b087      	sub	sp, #28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d3e:	e17f      	b.n	8002040 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	2101      	movs	r1, #1
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 8171 	beq.w	800203a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d00b      	beq.n	8001d78 <HAL_GPIO_Init+0x48>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d007      	beq.n	8001d78 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d6c:	2b11      	cmp	r3, #17
 8001d6e:	d003      	beq.n	8001d78 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b12      	cmp	r3, #18
 8001d76:	d130      	bne.n	8001dda <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	2203      	movs	r2, #3
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	68da      	ldr	r2, [r3, #12]
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dae:	2201      	movs	r2, #1
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	091b      	lsrs	r3, r3, #4
 8001dc4:	f003 0201 	and.w	r2, r3, #1
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	d118      	bne.n	8001e18 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001dec:	2201      	movs	r2, #1
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	08db      	lsrs	r3, r3, #3
 8001e02:	f003 0201 	and.w	r2, r3, #1
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	2203      	movs	r2, #3
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d003      	beq.n	8001e58 <HAL_GPIO_Init+0x128>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b12      	cmp	r3, #18
 8001e56:	d123      	bne.n	8001ea0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	08da      	lsrs	r2, r3, #3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3208      	adds	r2, #8
 8001e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e64:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	220f      	movs	r2, #15
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	691a      	ldr	r2, [r3, #16]
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	08da      	lsrs	r2, r3, #3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3208      	adds	r2, #8
 8001e9a:	6939      	ldr	r1, [r7, #16]
 8001e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	2203      	movs	r2, #3
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 0203 	and.w	r2, r3, #3
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 80ac 	beq.w	800203a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee2:	4b5f      	ldr	r3, [pc, #380]	@ (8002060 <HAL_GPIO_Init+0x330>)
 8001ee4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ee6:	4a5e      	ldr	r2, [pc, #376]	@ (8002060 <HAL_GPIO_Init+0x330>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	6613      	str	r3, [r2, #96]	@ 0x60
 8001eee:	4b5c      	ldr	r3, [pc, #368]	@ (8002060 <HAL_GPIO_Init+0x330>)
 8001ef0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001efa:	4a5a      	ldr	r2, [pc, #360]	@ (8002064 <HAL_GPIO_Init+0x334>)
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	089b      	lsrs	r3, r3, #2
 8001f00:	3302      	adds	r3, #2
 8001f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f06:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	220f      	movs	r2, #15
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43db      	mvns	r3, r3
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f24:	d025      	beq.n	8001f72 <HAL_GPIO_Init+0x242>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a4f      	ldr	r2, [pc, #316]	@ (8002068 <HAL_GPIO_Init+0x338>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d01f      	beq.n	8001f6e <HAL_GPIO_Init+0x23e>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a4e      	ldr	r2, [pc, #312]	@ (800206c <HAL_GPIO_Init+0x33c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d019      	beq.n	8001f6a <HAL_GPIO_Init+0x23a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a4d      	ldr	r2, [pc, #308]	@ (8002070 <HAL_GPIO_Init+0x340>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d013      	beq.n	8001f66 <HAL_GPIO_Init+0x236>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a4c      	ldr	r2, [pc, #304]	@ (8002074 <HAL_GPIO_Init+0x344>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d00d      	beq.n	8001f62 <HAL_GPIO_Init+0x232>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a4b      	ldr	r2, [pc, #300]	@ (8002078 <HAL_GPIO_Init+0x348>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d007      	beq.n	8001f5e <HAL_GPIO_Init+0x22e>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a4a      	ldr	r2, [pc, #296]	@ (800207c <HAL_GPIO_Init+0x34c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d101      	bne.n	8001f5a <HAL_GPIO_Init+0x22a>
 8001f56:	2306      	movs	r3, #6
 8001f58:	e00c      	b.n	8001f74 <HAL_GPIO_Init+0x244>
 8001f5a:	2307      	movs	r3, #7
 8001f5c:	e00a      	b.n	8001f74 <HAL_GPIO_Init+0x244>
 8001f5e:	2305      	movs	r3, #5
 8001f60:	e008      	b.n	8001f74 <HAL_GPIO_Init+0x244>
 8001f62:	2304      	movs	r3, #4
 8001f64:	e006      	b.n	8001f74 <HAL_GPIO_Init+0x244>
 8001f66:	2303      	movs	r3, #3
 8001f68:	e004      	b.n	8001f74 <HAL_GPIO_Init+0x244>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e002      	b.n	8001f74 <HAL_GPIO_Init+0x244>
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e000      	b.n	8001f74 <HAL_GPIO_Init+0x244>
 8001f72:	2300      	movs	r3, #0
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	f002 0203 	and.w	r2, r2, #3
 8001f7a:	0092      	lsls	r2, r2, #2
 8001f7c:	4093      	lsls	r3, r2
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f84:	4937      	ldr	r1, [pc, #220]	@ (8002064 <HAL_GPIO_Init+0x334>)
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	089b      	lsrs	r3, r3, #2
 8001f8a:	3302      	adds	r3, #2
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f92:	4b3b      	ldr	r3, [pc, #236]	@ (8002080 <HAL_GPIO_Init+0x350>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fb6:	4a32      	ldr	r2, [pc, #200]	@ (8002080 <HAL_GPIO_Init+0x350>)
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001fbc:	4b30      	ldr	r3, [pc, #192]	@ (8002080 <HAL_GPIO_Init+0x350>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fe0:	4a27      	ldr	r2, [pc, #156]	@ (8002080 <HAL_GPIO_Init+0x350>)
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fe6:	4b26      	ldr	r3, [pc, #152]	@ (8002080 <HAL_GPIO_Init+0x350>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4313      	orrs	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800200a:	4a1d      	ldr	r2, [pc, #116]	@ (8002080 <HAL_GPIO_Init+0x350>)
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002010:	4b1b      	ldr	r3, [pc, #108]	@ (8002080 <HAL_GPIO_Init+0x350>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	43db      	mvns	r3, r3
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4013      	ands	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4313      	orrs	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002034:	4a12      	ldr	r2, [pc, #72]	@ (8002080 <HAL_GPIO_Init+0x350>)
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3301      	adds	r3, #1
 800203e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	fa22 f303 	lsr.w	r3, r2, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	f47f ae78 	bne.w	8001d40 <HAL_GPIO_Init+0x10>
  }
}
 8002050:	bf00      	nop
 8002052:	bf00      	nop
 8002054:	371c      	adds	r7, #28
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000
 8002064:	40010000 	.word	0x40010000
 8002068:	48000400 	.word	0x48000400
 800206c:	48000800 	.word	0x48000800
 8002070:	48000c00 	.word	0x48000c00
 8002074:	48001000 	.word	0x48001000
 8002078:	48001400 	.word	0x48001400
 800207c:	48001800 	.word	0x48001800
 8002080:	40010400 	.word	0x40010400

08002084 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	691a      	ldr	r2, [r3, #16]
 8002094:	887b      	ldrh	r3, [r7, #2]
 8002096:	4013      	ands	r3, r2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d002      	beq.n	80020a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800209c:	2301      	movs	r3, #1
 800209e:	73fb      	strb	r3, [r7, #15]
 80020a0:	e001      	b.n	80020a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020a2:	2300      	movs	r3, #0
 80020a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	460b      	mov	r3, r1
 80020be:	807b      	strh	r3, [r7, #2]
 80020c0:	4613      	mov	r3, r2
 80020c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020c4:	787b      	ldrb	r3, [r7, #1]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020ca:	887a      	ldrh	r2, [r7, #2]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020d0:	e002      	b.n	80020d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020d2:	887a      	ldrh	r2, [r7, #2]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80020e8:	4b04      	ldr	r3, [pc, #16]	@ (80020fc <HAL_PWREx_GetVoltageRange+0x18>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40007000 	.word	0x40007000

08002100 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800210e:	d130      	bne.n	8002172 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002110:	4b23      	ldr	r3, [pc, #140]	@ (80021a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002118:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800211c:	d038      	beq.n	8002190 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800211e:	4b20      	ldr	r3, [pc, #128]	@ (80021a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002126:	4a1e      	ldr	r2, [pc, #120]	@ (80021a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002128:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800212c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800212e:	4b1d      	ldr	r3, [pc, #116]	@ (80021a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2232      	movs	r2, #50	@ 0x32
 8002134:	fb02 f303 	mul.w	r3, r2, r3
 8002138:	4a1b      	ldr	r2, [pc, #108]	@ (80021a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800213a:	fba2 2303 	umull	r2, r3, r2, r3
 800213e:	0c9b      	lsrs	r3, r3, #18
 8002140:	3301      	adds	r3, #1
 8002142:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002144:	e002      	b.n	800214c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	3b01      	subs	r3, #1
 800214a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800214c:	4b14      	ldr	r3, [pc, #80]	@ (80021a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002154:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002158:	d102      	bne.n	8002160 <HAL_PWREx_ControlVoltageScaling+0x60>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1f2      	bne.n	8002146 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002160:	4b0f      	ldr	r3, [pc, #60]	@ (80021a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002168:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800216c:	d110      	bne.n	8002190 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e00f      	b.n	8002192 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002172:	4b0b      	ldr	r3, [pc, #44]	@ (80021a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800217a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800217e:	d007      	beq.n	8002190 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002180:	4b07      	ldr	r3, [pc, #28]	@ (80021a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002188:	4a05      	ldr	r2, [pc, #20]	@ (80021a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800218a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800218e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40007000 	.word	0x40007000
 80021a4:	20000000 	.word	0x20000000
 80021a8:	431bde83 	.word	0x431bde83

080021ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b088      	sub	sp, #32
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e3d8      	b.n	8002970 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021be:	4b97      	ldr	r3, [pc, #604]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 030c 	and.w	r3, r3, #12
 80021c6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021c8:	4b94      	ldr	r3, [pc, #592]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0310 	and.w	r3, r3, #16
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 80e4 	beq.w	80023a8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d007      	beq.n	80021f6 <HAL_RCC_OscConfig+0x4a>
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	2b0c      	cmp	r3, #12
 80021ea:	f040 808b 	bne.w	8002304 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	f040 8087 	bne.w	8002304 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021f6:	4b89      	ldr	r3, [pc, #548]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d005      	beq.n	800220e <HAL_RCC_OscConfig+0x62>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e3b0      	b.n	8002970 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a1a      	ldr	r2, [r3, #32]
 8002212:	4b82      	ldr	r3, [pc, #520]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	2b00      	cmp	r3, #0
 800221c:	d004      	beq.n	8002228 <HAL_RCC_OscConfig+0x7c>
 800221e:	4b7f      	ldr	r3, [pc, #508]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002226:	e005      	b.n	8002234 <HAL_RCC_OscConfig+0x88>
 8002228:	4b7c      	ldr	r3, [pc, #496]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 800222a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800222e:	091b      	lsrs	r3, r3, #4
 8002230:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002234:	4293      	cmp	r3, r2
 8002236:	d223      	bcs.n	8002280 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	4618      	mov	r0, r3
 800223e:	f000 fd43 	bl	8002cc8 <RCC_SetFlashLatencyFromMSIRange>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e391      	b.n	8002970 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800224c:	4b73      	ldr	r3, [pc, #460]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a72      	ldr	r2, [pc, #456]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 8002252:	f043 0308 	orr.w	r3, r3, #8
 8002256:	6013      	str	r3, [r2, #0]
 8002258:	4b70      	ldr	r3, [pc, #448]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	496d      	ldr	r1, [pc, #436]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 8002266:	4313      	orrs	r3, r2
 8002268:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800226a:	4b6c      	ldr	r3, [pc, #432]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	021b      	lsls	r3, r3, #8
 8002278:	4968      	ldr	r1, [pc, #416]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 800227a:	4313      	orrs	r3, r2
 800227c:	604b      	str	r3, [r1, #4]
 800227e:	e025      	b.n	80022cc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002280:	4b66      	ldr	r3, [pc, #408]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a65      	ldr	r2, [pc, #404]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 8002286:	f043 0308 	orr.w	r3, r3, #8
 800228a:	6013      	str	r3, [r2, #0]
 800228c:	4b63      	ldr	r3, [pc, #396]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	4960      	ldr	r1, [pc, #384]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 800229a:	4313      	orrs	r3, r2
 800229c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800229e:	4b5f      	ldr	r3, [pc, #380]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	021b      	lsls	r3, r3, #8
 80022ac:	495b      	ldr	r1, [pc, #364]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d109      	bne.n	80022cc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	4618      	mov	r0, r3
 80022be:	f000 fd03 	bl	8002cc8 <RCC_SetFlashLatencyFromMSIRange>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e351      	b.n	8002970 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022cc:	f000 fc38 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 80022d0:	4602      	mov	r2, r0
 80022d2:	4b52      	ldr	r3, [pc, #328]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	091b      	lsrs	r3, r3, #4
 80022d8:	f003 030f 	and.w	r3, r3, #15
 80022dc:	4950      	ldr	r1, [pc, #320]	@ (8002420 <HAL_RCC_OscConfig+0x274>)
 80022de:	5ccb      	ldrb	r3, [r1, r3]
 80022e0:	f003 031f 	and.w	r3, r3, #31
 80022e4:	fa22 f303 	lsr.w	r3, r2, r3
 80022e8:	4a4e      	ldr	r2, [pc, #312]	@ (8002424 <HAL_RCC_OscConfig+0x278>)
 80022ea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80022ec:	4b4e      	ldr	r3, [pc, #312]	@ (8002428 <HAL_RCC_OscConfig+0x27c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fe fe69 	bl	8000fc8 <HAL_InitTick>
 80022f6:	4603      	mov	r3, r0
 80022f8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d052      	beq.n	80023a6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002300:	7bfb      	ldrb	r3, [r7, #15]
 8002302:	e335      	b.n	8002970 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d032      	beq.n	8002372 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800230c:	4b43      	ldr	r3, [pc, #268]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a42      	ldr	r2, [pc, #264]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002318:	f7fe fea6 	bl	8001068 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002320:	f7fe fea2 	bl	8001068 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e31e      	b.n	8002970 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002332:	4b3a      	ldr	r3, [pc, #232]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0f0      	beq.n	8002320 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800233e:	4b37      	ldr	r3, [pc, #220]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a36      	ldr	r2, [pc, #216]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 8002344:	f043 0308 	orr.w	r3, r3, #8
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	4b34      	ldr	r3, [pc, #208]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	4931      	ldr	r1, [pc, #196]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 8002358:	4313      	orrs	r3, r2
 800235a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800235c:	4b2f      	ldr	r3, [pc, #188]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	021b      	lsls	r3, r3, #8
 800236a:	492c      	ldr	r1, [pc, #176]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 800236c:	4313      	orrs	r3, r2
 800236e:	604b      	str	r3, [r1, #4]
 8002370:	e01a      	b.n	80023a8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002372:	4b2a      	ldr	r3, [pc, #168]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a29      	ldr	r2, [pc, #164]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 8002378:	f023 0301 	bic.w	r3, r3, #1
 800237c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800237e:	f7fe fe73 	bl	8001068 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002386:	f7fe fe6f 	bl	8001068 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e2eb      	b.n	8002970 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002398:	4b20      	ldr	r3, [pc, #128]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1f0      	bne.n	8002386 <HAL_RCC_OscConfig+0x1da>
 80023a4:	e000      	b.n	80023a8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023a6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d074      	beq.n	800249e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	d005      	beq.n	80023c6 <HAL_RCC_OscConfig+0x21a>
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	2b0c      	cmp	r3, #12
 80023be:	d10e      	bne.n	80023de <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	2b03      	cmp	r3, #3
 80023c4:	d10b      	bne.n	80023de <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c6:	4b15      	ldr	r3, [pc, #84]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d064      	beq.n	800249c <HAL_RCC_OscConfig+0x2f0>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d160      	bne.n	800249c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e2c8      	b.n	8002970 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023e6:	d106      	bne.n	80023f6 <HAL_RCC_OscConfig+0x24a>
 80023e8:	4b0c      	ldr	r3, [pc, #48]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a0b      	ldr	r2, [pc, #44]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 80023ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023f2:	6013      	str	r3, [r2, #0]
 80023f4:	e026      	b.n	8002444 <HAL_RCC_OscConfig+0x298>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023fe:	d115      	bne.n	800242c <HAL_RCC_OscConfig+0x280>
 8002400:	4b06      	ldr	r3, [pc, #24]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a05      	ldr	r2, [pc, #20]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 8002406:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800240a:	6013      	str	r3, [r2, #0]
 800240c:	4b03      	ldr	r3, [pc, #12]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a02      	ldr	r2, [pc, #8]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 8002412:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002416:	6013      	str	r3, [r2, #0]
 8002418:	e014      	b.n	8002444 <HAL_RCC_OscConfig+0x298>
 800241a:	bf00      	nop
 800241c:	40021000 	.word	0x40021000
 8002420:	080046c8 	.word	0x080046c8
 8002424:	20000000 	.word	0x20000000
 8002428:	20000004 	.word	0x20000004
 800242c:	4ba0      	ldr	r3, [pc, #640]	@ (80026b0 <HAL_RCC_OscConfig+0x504>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a9f      	ldr	r2, [pc, #636]	@ (80026b0 <HAL_RCC_OscConfig+0x504>)
 8002432:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002436:	6013      	str	r3, [r2, #0]
 8002438:	4b9d      	ldr	r3, [pc, #628]	@ (80026b0 <HAL_RCC_OscConfig+0x504>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a9c      	ldr	r2, [pc, #624]	@ (80026b0 <HAL_RCC_OscConfig+0x504>)
 800243e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002442:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d013      	beq.n	8002474 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244c:	f7fe fe0c 	bl	8001068 <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002454:	f7fe fe08 	bl	8001068 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b64      	cmp	r3, #100	@ 0x64
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e284      	b.n	8002970 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002466:	4b92      	ldr	r3, [pc, #584]	@ (80026b0 <HAL_RCC_OscConfig+0x504>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0f0      	beq.n	8002454 <HAL_RCC_OscConfig+0x2a8>
 8002472:	e014      	b.n	800249e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002474:	f7fe fdf8 	bl	8001068 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800247c:	f7fe fdf4 	bl	8001068 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b64      	cmp	r3, #100	@ 0x64
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e270      	b.n	8002970 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800248e:	4b88      	ldr	r3, [pc, #544]	@ (80026b0 <HAL_RCC_OscConfig+0x504>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1f0      	bne.n	800247c <HAL_RCC_OscConfig+0x2d0>
 800249a:	e000      	b.n	800249e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800249c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d060      	beq.n	800256c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	2b04      	cmp	r3, #4
 80024ae:	d005      	beq.n	80024bc <HAL_RCC_OscConfig+0x310>
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	2b0c      	cmp	r3, #12
 80024b4:	d119      	bne.n	80024ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d116      	bne.n	80024ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024bc:	4b7c      	ldr	r3, [pc, #496]	@ (80026b0 <HAL_RCC_OscConfig+0x504>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_RCC_OscConfig+0x328>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e24d      	b.n	8002970 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d4:	4b76      	ldr	r3, [pc, #472]	@ (80026b0 <HAL_RCC_OscConfig+0x504>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	061b      	lsls	r3, r3, #24
 80024e2:	4973      	ldr	r1, [pc, #460]	@ (80026b0 <HAL_RCC_OscConfig+0x504>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024e8:	e040      	b.n	800256c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d023      	beq.n	800253a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024f2:	4b6f      	ldr	r3, [pc, #444]	@ (80026b0 <HAL_RCC_OscConfig+0x504>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a6e      	ldr	r2, [pc, #440]	@ (80026b0 <HAL_RCC_OscConfig+0x504>)
 80024f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fe:	f7fe fdb3 	bl	8001068 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002506:	f7fe fdaf 	bl	8001068 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e22b      	b.n	8002970 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002518:	4b65      	ldr	r3, [pc, #404]	@ (80026b0 <HAL_RCC_OscConfig+0x504>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0f0      	beq.n	8002506 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002524:	4b62      	ldr	r3, [pc, #392]	@ (80026b0 <HAL_RCC_OscConfig+0x504>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	061b      	lsls	r3, r3, #24
 8002532:	495f      	ldr	r1, [pc, #380]	@ (80026b0 <HAL_RCC_OscConfig+0x504>)
 8002534:	4313      	orrs	r3, r2
 8002536:	604b      	str	r3, [r1, #4]
 8002538:	e018      	b.n	800256c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800253a:	4b5d      	ldr	r3, [pc, #372]	@ (80026b0 <HAL_RCC_OscConfig+0x504>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a5c      	ldr	r2, [pc, #368]	@ (80026b0 <HAL_RCC_OscConfig+0x504>)
 8002540:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002544:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002546:	f7fe fd8f 	bl	8001068 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800254e:	f7fe fd8b 	bl	8001068 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e207      	b.n	8002970 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002560:	4b53      	ldr	r3, [pc, #332]	@ (80026b0 <HAL_RCC_OscConfig+0x504>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1f0      	bne.n	800254e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	2b00      	cmp	r3, #0
 8002576:	d03c      	beq.n	80025f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d01c      	beq.n	80025ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002580:	4b4b      	ldr	r3, [pc, #300]	@ (80026b0 <HAL_RCC_OscConfig+0x504>)
 8002582:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002586:	4a4a      	ldr	r2, [pc, #296]	@ (80026b0 <HAL_RCC_OscConfig+0x504>)
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002590:	f7fe fd6a 	bl	8001068 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002598:	f7fe fd66 	bl	8001068 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e1e2      	b.n	8002970 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025aa:	4b41      	ldr	r3, [pc, #260]	@ (80026b0 <HAL_RCC_OscConfig+0x504>)
 80025ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0ef      	beq.n	8002598 <HAL_RCC_OscConfig+0x3ec>
 80025b8:	e01b      	b.n	80025f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ba:	4b3d      	ldr	r3, [pc, #244]	@ (80026b0 <HAL_RCC_OscConfig+0x504>)
 80025bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025c0:	4a3b      	ldr	r2, [pc, #236]	@ (80026b0 <HAL_RCC_OscConfig+0x504>)
 80025c2:	f023 0301 	bic.w	r3, r3, #1
 80025c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ca:	f7fe fd4d 	bl	8001068 <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025d2:	f7fe fd49 	bl	8001068 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e1c5      	b.n	8002970 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025e4:	4b32      	ldr	r3, [pc, #200]	@ (80026b0 <HAL_RCC_OscConfig+0x504>)
 80025e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1ef      	bne.n	80025d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0304 	and.w	r3, r3, #4
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 80a6 	beq.w	800274c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002600:	2300      	movs	r3, #0
 8002602:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002604:	4b2a      	ldr	r3, [pc, #168]	@ (80026b0 <HAL_RCC_OscConfig+0x504>)
 8002606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002608:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10d      	bne.n	800262c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002610:	4b27      	ldr	r3, [pc, #156]	@ (80026b0 <HAL_RCC_OscConfig+0x504>)
 8002612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002614:	4a26      	ldr	r2, [pc, #152]	@ (80026b0 <HAL_RCC_OscConfig+0x504>)
 8002616:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800261a:	6593      	str	r3, [r2, #88]	@ 0x58
 800261c:	4b24      	ldr	r3, [pc, #144]	@ (80026b0 <HAL_RCC_OscConfig+0x504>)
 800261e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002624:	60bb      	str	r3, [r7, #8]
 8002626:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002628:	2301      	movs	r3, #1
 800262a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800262c:	4b21      	ldr	r3, [pc, #132]	@ (80026b4 <HAL_RCC_OscConfig+0x508>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002634:	2b00      	cmp	r3, #0
 8002636:	d118      	bne.n	800266a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002638:	4b1e      	ldr	r3, [pc, #120]	@ (80026b4 <HAL_RCC_OscConfig+0x508>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a1d      	ldr	r2, [pc, #116]	@ (80026b4 <HAL_RCC_OscConfig+0x508>)
 800263e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002642:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002644:	f7fe fd10 	bl	8001068 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800264c:	f7fe fd0c 	bl	8001068 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e188      	b.n	8002970 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800265e:	4b15      	ldr	r3, [pc, #84]	@ (80026b4 <HAL_RCC_OscConfig+0x508>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0f0      	beq.n	800264c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d108      	bne.n	8002684 <HAL_RCC_OscConfig+0x4d8>
 8002672:	4b0f      	ldr	r3, [pc, #60]	@ (80026b0 <HAL_RCC_OscConfig+0x504>)
 8002674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002678:	4a0d      	ldr	r2, [pc, #52]	@ (80026b0 <HAL_RCC_OscConfig+0x504>)
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002682:	e029      	b.n	80026d8 <HAL_RCC_OscConfig+0x52c>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2b05      	cmp	r3, #5
 800268a:	d115      	bne.n	80026b8 <HAL_RCC_OscConfig+0x50c>
 800268c:	4b08      	ldr	r3, [pc, #32]	@ (80026b0 <HAL_RCC_OscConfig+0x504>)
 800268e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002692:	4a07      	ldr	r2, [pc, #28]	@ (80026b0 <HAL_RCC_OscConfig+0x504>)
 8002694:	f043 0304 	orr.w	r3, r3, #4
 8002698:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800269c:	4b04      	ldr	r3, [pc, #16]	@ (80026b0 <HAL_RCC_OscConfig+0x504>)
 800269e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026a2:	4a03      	ldr	r2, [pc, #12]	@ (80026b0 <HAL_RCC_OscConfig+0x504>)
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026ac:	e014      	b.n	80026d8 <HAL_RCC_OscConfig+0x52c>
 80026ae:	bf00      	nop
 80026b0:	40021000 	.word	0x40021000
 80026b4:	40007000 	.word	0x40007000
 80026b8:	4b91      	ldr	r3, [pc, #580]	@ (8002900 <HAL_RCC_OscConfig+0x754>)
 80026ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026be:	4a90      	ldr	r2, [pc, #576]	@ (8002900 <HAL_RCC_OscConfig+0x754>)
 80026c0:	f023 0301 	bic.w	r3, r3, #1
 80026c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026c8:	4b8d      	ldr	r3, [pc, #564]	@ (8002900 <HAL_RCC_OscConfig+0x754>)
 80026ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ce:	4a8c      	ldr	r2, [pc, #560]	@ (8002900 <HAL_RCC_OscConfig+0x754>)
 80026d0:	f023 0304 	bic.w	r3, r3, #4
 80026d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d016      	beq.n	800270e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e0:	f7fe fcc2 	bl	8001068 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026e6:	e00a      	b.n	80026fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e8:	f7fe fcbe 	bl	8001068 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e138      	b.n	8002970 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026fe:	4b80      	ldr	r3, [pc, #512]	@ (8002900 <HAL_RCC_OscConfig+0x754>)
 8002700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0ed      	beq.n	80026e8 <HAL_RCC_OscConfig+0x53c>
 800270c:	e015      	b.n	800273a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270e:	f7fe fcab 	bl	8001068 <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002714:	e00a      	b.n	800272c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002716:	f7fe fca7 	bl	8001068 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002724:	4293      	cmp	r3, r2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e121      	b.n	8002970 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800272c:	4b74      	ldr	r3, [pc, #464]	@ (8002900 <HAL_RCC_OscConfig+0x754>)
 800272e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1ed      	bne.n	8002716 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800273a:	7ffb      	ldrb	r3, [r7, #31]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d105      	bne.n	800274c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002740:	4b6f      	ldr	r3, [pc, #444]	@ (8002900 <HAL_RCC_OscConfig+0x754>)
 8002742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002744:	4a6e      	ldr	r2, [pc, #440]	@ (8002900 <HAL_RCC_OscConfig+0x754>)
 8002746:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800274a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 810c 	beq.w	800296e <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800275a:	2b02      	cmp	r3, #2
 800275c:	f040 80d4 	bne.w	8002908 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002760:	4b67      	ldr	r3, [pc, #412]	@ (8002900 <HAL_RCC_OscConfig+0x754>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f003 0203 	and.w	r2, r3, #3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002770:	429a      	cmp	r2, r3
 8002772:	d130      	bne.n	80027d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277e:	3b01      	subs	r3, #1
 8002780:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002782:	429a      	cmp	r2, r3
 8002784:	d127      	bne.n	80027d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002790:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002792:	429a      	cmp	r2, r3
 8002794:	d11f      	bne.n	80027d6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80027a0:	2a07      	cmp	r2, #7
 80027a2:	bf14      	ite	ne
 80027a4:	2201      	movne	r2, #1
 80027a6:	2200      	moveq	r2, #0
 80027a8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d113      	bne.n	80027d6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027b8:	085b      	lsrs	r3, r3, #1
 80027ba:	3b01      	subs	r3, #1
 80027bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80027be:	429a      	cmp	r2, r3
 80027c0:	d109      	bne.n	80027d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027cc:	085b      	lsrs	r3, r3, #1
 80027ce:	3b01      	subs	r3, #1
 80027d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d06e      	beq.n	80028b4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	2b0c      	cmp	r3, #12
 80027da:	d069      	beq.n	80028b0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80027dc:	4b48      	ldr	r3, [pc, #288]	@ (8002900 <HAL_RCC_OscConfig+0x754>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d105      	bne.n	80027f4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80027e8:	4b45      	ldr	r3, [pc, #276]	@ (8002900 <HAL_RCC_OscConfig+0x754>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0bb      	b.n	8002970 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80027f8:	4b41      	ldr	r3, [pc, #260]	@ (8002900 <HAL_RCC_OscConfig+0x754>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a40      	ldr	r2, [pc, #256]	@ (8002900 <HAL_RCC_OscConfig+0x754>)
 80027fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002802:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002804:	f7fe fc30 	bl	8001068 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800280c:	f7fe fc2c 	bl	8001068 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e0a8      	b.n	8002970 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800281e:	4b38      	ldr	r3, [pc, #224]	@ (8002900 <HAL_RCC_OscConfig+0x754>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1f0      	bne.n	800280c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800282a:	4b35      	ldr	r3, [pc, #212]	@ (8002900 <HAL_RCC_OscConfig+0x754>)
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	4b35      	ldr	r3, [pc, #212]	@ (8002904 <HAL_RCC_OscConfig+0x758>)
 8002830:	4013      	ands	r3, r2
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800283a:	3a01      	subs	r2, #1
 800283c:	0112      	lsls	r2, r2, #4
 800283e:	4311      	orrs	r1, r2
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002844:	0212      	lsls	r2, r2, #8
 8002846:	4311      	orrs	r1, r2
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800284c:	0852      	lsrs	r2, r2, #1
 800284e:	3a01      	subs	r2, #1
 8002850:	0552      	lsls	r2, r2, #21
 8002852:	4311      	orrs	r1, r2
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002858:	0852      	lsrs	r2, r2, #1
 800285a:	3a01      	subs	r2, #1
 800285c:	0652      	lsls	r2, r2, #25
 800285e:	4311      	orrs	r1, r2
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002864:	0912      	lsrs	r2, r2, #4
 8002866:	0452      	lsls	r2, r2, #17
 8002868:	430a      	orrs	r2, r1
 800286a:	4925      	ldr	r1, [pc, #148]	@ (8002900 <HAL_RCC_OscConfig+0x754>)
 800286c:	4313      	orrs	r3, r2
 800286e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002870:	4b23      	ldr	r3, [pc, #140]	@ (8002900 <HAL_RCC_OscConfig+0x754>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a22      	ldr	r2, [pc, #136]	@ (8002900 <HAL_RCC_OscConfig+0x754>)
 8002876:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800287a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800287c:	4b20      	ldr	r3, [pc, #128]	@ (8002900 <HAL_RCC_OscConfig+0x754>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	4a1f      	ldr	r2, [pc, #124]	@ (8002900 <HAL_RCC_OscConfig+0x754>)
 8002882:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002886:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002888:	f7fe fbee 	bl	8001068 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002890:	f7fe fbea 	bl	8001068 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e066      	b.n	8002970 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028a2:	4b17      	ldr	r3, [pc, #92]	@ (8002900 <HAL_RCC_OscConfig+0x754>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0f0      	beq.n	8002890 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028ae:	e05e      	b.n	800296e <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e05d      	b.n	8002970 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028b4:	4b12      	ldr	r3, [pc, #72]	@ (8002900 <HAL_RCC_OscConfig+0x754>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d156      	bne.n	800296e <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002900 <HAL_RCC_OscConfig+0x754>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a0e      	ldr	r2, [pc, #56]	@ (8002900 <HAL_RCC_OscConfig+0x754>)
 80028c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002900 <HAL_RCC_OscConfig+0x754>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002900 <HAL_RCC_OscConfig+0x754>)
 80028d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028d8:	f7fe fbc6 	bl	8001068 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e0:	f7fe fbc2 	bl	8001068 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e03e      	b.n	8002970 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028f2:	4b03      	ldr	r3, [pc, #12]	@ (8002900 <HAL_RCC_OscConfig+0x754>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f0      	beq.n	80028e0 <HAL_RCC_OscConfig+0x734>
 80028fe:	e036      	b.n	800296e <HAL_RCC_OscConfig+0x7c2>
 8002900:	40021000 	.word	0x40021000
 8002904:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	2b0c      	cmp	r3, #12
 800290c:	d02d      	beq.n	800296a <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290e:	4b1a      	ldr	r3, [pc, #104]	@ (8002978 <HAL_RCC_OscConfig+0x7cc>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a19      	ldr	r2, [pc, #100]	@ (8002978 <HAL_RCC_OscConfig+0x7cc>)
 8002914:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002918:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800291a:	4b17      	ldr	r3, [pc, #92]	@ (8002978 <HAL_RCC_OscConfig+0x7cc>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 5320 	and.w	r3, r3, #671088640	@ 0x28000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d105      	bne.n	8002932 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002926:	4b14      	ldr	r3, [pc, #80]	@ (8002978 <HAL_RCC_OscConfig+0x7cc>)
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	4a13      	ldr	r2, [pc, #76]	@ (8002978 <HAL_RCC_OscConfig+0x7cc>)
 800292c:	f023 0303 	bic.w	r3, r3, #3
 8002930:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002932:	4b11      	ldr	r3, [pc, #68]	@ (8002978 <HAL_RCC_OscConfig+0x7cc>)
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	4a10      	ldr	r2, [pc, #64]	@ (8002978 <HAL_RCC_OscConfig+0x7cc>)
 8002938:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 800293c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002940:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002942:	f7fe fb91 	bl	8001068 <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800294a:	f7fe fb8d 	bl	8001068 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e009      	b.n	8002970 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800295c:	4b06      	ldr	r3, [pc, #24]	@ (8002978 <HAL_RCC_OscConfig+0x7cc>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1f0      	bne.n	800294a <HAL_RCC_OscConfig+0x79e>
 8002968:	e001      	b.n	800296e <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3720      	adds	r7, #32
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40021000 	.word	0x40021000

0800297c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e0c8      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002990:	4b66      	ldr	r3, [pc, #408]	@ (8002b2c <HAL_RCC_ClockConfig+0x1b0>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d910      	bls.n	80029c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299e:	4b63      	ldr	r3, [pc, #396]	@ (8002b2c <HAL_RCC_ClockConfig+0x1b0>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f023 0207 	bic.w	r2, r3, #7
 80029a6:	4961      	ldr	r1, [pc, #388]	@ (8002b2c <HAL_RCC_ClockConfig+0x1b0>)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ae:	4b5f      	ldr	r3, [pc, #380]	@ (8002b2c <HAL_RCC_ClockConfig+0x1b0>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d001      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e0b0      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d04c      	beq.n	8002a66 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d107      	bne.n	80029e4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029d4:	4b56      	ldr	r3, [pc, #344]	@ (8002b30 <HAL_RCC_ClockConfig+0x1b4>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d121      	bne.n	8002a24 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e09e      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d107      	bne.n	80029fc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029ec:	4b50      	ldr	r3, [pc, #320]	@ (8002b30 <HAL_RCC_ClockConfig+0x1b4>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d115      	bne.n	8002a24 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e092      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d107      	bne.n	8002a14 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a04:	4b4a      	ldr	r3, [pc, #296]	@ (8002b30 <HAL_RCC_ClockConfig+0x1b4>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d109      	bne.n	8002a24 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e086      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a14:	4b46      	ldr	r3, [pc, #280]	@ (8002b30 <HAL_RCC_ClockConfig+0x1b4>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e07e      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a24:	4b42      	ldr	r3, [pc, #264]	@ (8002b30 <HAL_RCC_ClockConfig+0x1b4>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f023 0203 	bic.w	r2, r3, #3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	493f      	ldr	r1, [pc, #252]	@ (8002b30 <HAL_RCC_ClockConfig+0x1b4>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a36:	f7fe fb17 	bl	8001068 <HAL_GetTick>
 8002a3a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a3c:	e00a      	b.n	8002a54 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a3e:	f7fe fb13 	bl	8001068 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e066      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a54:	4b36      	ldr	r3, [pc, #216]	@ (8002b30 <HAL_RCC_ClockConfig+0x1b4>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 020c 	and.w	r2, r3, #12
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d1eb      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d008      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a72:	4b2f      	ldr	r3, [pc, #188]	@ (8002b30 <HAL_RCC_ClockConfig+0x1b4>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	492c      	ldr	r1, [pc, #176]	@ (8002b30 <HAL_RCC_ClockConfig+0x1b4>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a84:	4b29      	ldr	r3, [pc, #164]	@ (8002b2c <HAL_RCC_ClockConfig+0x1b0>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d210      	bcs.n	8002ab4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a92:	4b26      	ldr	r3, [pc, #152]	@ (8002b2c <HAL_RCC_ClockConfig+0x1b0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f023 0207 	bic.w	r2, r3, #7
 8002a9a:	4924      	ldr	r1, [pc, #144]	@ (8002b2c <HAL_RCC_ClockConfig+0x1b0>)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa2:	4b22      	ldr	r3, [pc, #136]	@ (8002b2c <HAL_RCC_ClockConfig+0x1b0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d001      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e036      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d008      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b30 <HAL_RCC_ClockConfig+0x1b4>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	4918      	ldr	r1, [pc, #96]	@ (8002b30 <HAL_RCC_ClockConfig+0x1b4>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d009      	beq.n	8002af2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ade:	4b14      	ldr	r3, [pc, #80]	@ (8002b30 <HAL_RCC_ClockConfig+0x1b4>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4910      	ldr	r1, [pc, #64]	@ (8002b30 <HAL_RCC_ClockConfig+0x1b4>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002af2:	f000 f825 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 8002af6:	4602      	mov	r2, r0
 8002af8:	4b0d      	ldr	r3, [pc, #52]	@ (8002b30 <HAL_RCC_ClockConfig+0x1b4>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	091b      	lsrs	r3, r3, #4
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	490c      	ldr	r1, [pc, #48]	@ (8002b34 <HAL_RCC_ClockConfig+0x1b8>)
 8002b04:	5ccb      	ldrb	r3, [r1, r3]
 8002b06:	f003 031f 	and.w	r3, r3, #31
 8002b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b12:	4b0a      	ldr	r3, [pc, #40]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c0>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fe fa56 	bl	8000fc8 <HAL_InitTick>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b20:	7afb      	ldrb	r3, [r7, #11]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40022000 	.word	0x40022000
 8002b30:	40021000 	.word	0x40021000
 8002b34:	080046c8 	.word	0x080046c8
 8002b38:	20000000 	.word	0x20000000
 8002b3c:	20000004 	.word	0x20000004

08002b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b089      	sub	sp, #36	@ 0x24
 8002b44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b46:	2300      	movs	r3, #0
 8002b48:	61fb      	str	r3, [r7, #28]
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b4e:	4b3e      	ldr	r3, [pc, #248]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b58:	4b3b      	ldr	r3, [pc, #236]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d005      	beq.n	8002b74 <HAL_RCC_GetSysClockFreq+0x34>
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	2b0c      	cmp	r3, #12
 8002b6c:	d121      	bne.n	8002bb2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d11e      	bne.n	8002bb2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b74:	4b34      	ldr	r3, [pc, #208]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d107      	bne.n	8002b90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b80:	4b31      	ldr	r3, [pc, #196]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b86:	0a1b      	lsrs	r3, r3, #8
 8002b88:	f003 030f 	and.w	r3, r3, #15
 8002b8c:	61fb      	str	r3, [r7, #28]
 8002b8e:	e005      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b90:	4b2d      	ldr	r3, [pc, #180]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	091b      	lsrs	r3, r3, #4
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b9c:	4a2b      	ldr	r2, [pc, #172]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10d      	bne.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bb0:	e00a      	b.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d102      	bne.n	8002bbe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bb8:	4b25      	ldr	r3, [pc, #148]	@ (8002c50 <HAL_RCC_GetSysClockFreq+0x110>)
 8002bba:	61bb      	str	r3, [r7, #24]
 8002bbc:	e004      	b.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d101      	bne.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002bc4:	4b23      	ldr	r3, [pc, #140]	@ (8002c54 <HAL_RCC_GetSysClockFreq+0x114>)
 8002bc6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	2b0c      	cmp	r3, #12
 8002bcc:	d134      	bne.n	8002c38 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bce:	4b1e      	ldr	r3, [pc, #120]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d003      	beq.n	8002be6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	2b03      	cmp	r3, #3
 8002be2:	d003      	beq.n	8002bec <HAL_RCC_GetSysClockFreq+0xac>
 8002be4:	e005      	b.n	8002bf2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002be6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c50 <HAL_RCC_GetSysClockFreq+0x110>)
 8002be8:	617b      	str	r3, [r7, #20]
      break;
 8002bea:	e005      	b.n	8002bf8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002bec:	4b19      	ldr	r3, [pc, #100]	@ (8002c54 <HAL_RCC_GetSysClockFreq+0x114>)
 8002bee:	617b      	str	r3, [r7, #20]
      break;
 8002bf0:	e002      	b.n	8002bf8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	617b      	str	r3, [r7, #20]
      break;
 8002bf6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bf8:	4b13      	ldr	r3, [pc, #76]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	091b      	lsrs	r3, r3, #4
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	3301      	adds	r3, #1
 8002c04:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c06:	4b10      	ldr	r3, [pc, #64]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	0a1b      	lsrs	r3, r3, #8
 8002c0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	fb03 f202 	mul.w	r2, r3, r2
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	0e5b      	lsrs	r3, r3, #25
 8002c24:	f003 0303 	and.w	r3, r3, #3
 8002c28:	3301      	adds	r3, #1
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c36:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c38:	69bb      	ldr	r3, [r7, #24]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3724      	adds	r7, #36	@ 0x24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	080046e0 	.word	0x080046e0
 8002c50:	00f42400 	.word	0x00f42400
 8002c54:	007a1200 	.word	0x007a1200

08002c58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c5c:	4b03      	ldr	r3, [pc, #12]	@ (8002c6c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	20000000 	.word	0x20000000

08002c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c74:	f7ff fff0 	bl	8002c58 <HAL_RCC_GetHCLKFreq>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	4b06      	ldr	r3, [pc, #24]	@ (8002c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	0a1b      	lsrs	r3, r3, #8
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	4904      	ldr	r1, [pc, #16]	@ (8002c98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c86:	5ccb      	ldrb	r3, [r1, r3]
 8002c88:	f003 031f 	and.w	r3, r3, #31
 8002c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40021000 	.word	0x40021000
 8002c98:	080046d8 	.word	0x080046d8

08002c9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ca0:	f7ff ffda 	bl	8002c58 <HAL_RCC_GetHCLKFreq>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	4b06      	ldr	r3, [pc, #24]	@ (8002cc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	0adb      	lsrs	r3, r3, #11
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	4904      	ldr	r1, [pc, #16]	@ (8002cc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cb2:	5ccb      	ldrb	r3, [r1, r3]
 8002cb4:	f003 031f 	and.w	r3, r3, #31
 8002cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	080046d8 	.word	0x080046d8

08002cc8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002cd4:	4b2a      	ldr	r3, [pc, #168]	@ (8002d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ce0:	f7ff fa00 	bl	80020e4 <HAL_PWREx_GetVoltageRange>
 8002ce4:	6178      	str	r0, [r7, #20]
 8002ce6:	e014      	b.n	8002d12 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ce8:	4b25      	ldr	r3, [pc, #148]	@ (8002d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cec:	4a24      	ldr	r2, [pc, #144]	@ (8002d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cf2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cf4:	4b22      	ldr	r3, [pc, #136]	@ (8002d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d00:	f7ff f9f0 	bl	80020e4 <HAL_PWREx_GetVoltageRange>
 8002d04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d06:	4b1e      	ldr	r3, [pc, #120]	@ (8002d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d0a:	4a1d      	ldr	r2, [pc, #116]	@ (8002d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d10:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d18:	d10b      	bne.n	8002d32 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b80      	cmp	r3, #128	@ 0x80
 8002d1e:	d919      	bls.n	8002d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2ba0      	cmp	r3, #160	@ 0xa0
 8002d24:	d902      	bls.n	8002d2c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d26:	2302      	movs	r3, #2
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	e013      	b.n	8002d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	613b      	str	r3, [r7, #16]
 8002d30:	e010      	b.n	8002d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b80      	cmp	r3, #128	@ 0x80
 8002d36:	d902      	bls.n	8002d3e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d38:	2303      	movs	r3, #3
 8002d3a:	613b      	str	r3, [r7, #16]
 8002d3c:	e00a      	b.n	8002d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b80      	cmp	r3, #128	@ 0x80
 8002d42:	d102      	bne.n	8002d4a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d44:	2302      	movs	r3, #2
 8002d46:	613b      	str	r3, [r7, #16]
 8002d48:	e004      	b.n	8002d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b70      	cmp	r3, #112	@ 0x70
 8002d4e:	d101      	bne.n	8002d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d50:	2301      	movs	r3, #1
 8002d52:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d54:	4b0b      	ldr	r3, [pc, #44]	@ (8002d84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f023 0207 	bic.w	r2, r3, #7
 8002d5c:	4909      	ldr	r1, [pc, #36]	@ (8002d84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d64:	4b07      	ldr	r3, [pc, #28]	@ (8002d84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d001      	beq.n	8002d76 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40021000 	.word	0x40021000
 8002d84:	40022000 	.word	0x40022000

08002d88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d90:	2300      	movs	r3, #0
 8002d92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d94:	2300      	movs	r3, #0
 8002d96:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d041      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002da8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002dac:	d02a      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002dae:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002db2:	d824      	bhi.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002db4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002db8:	d008      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002dba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002dbe:	d81e      	bhi.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00a      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002dc4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dc8:	d010      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002dca:	e018      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002dcc:	4b86      	ldr	r3, [pc, #536]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	4a85      	ldr	r2, [pc, #532]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dd6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dd8:	e015      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	3304      	adds	r3, #4
 8002dde:	2100      	movs	r1, #0
 8002de0:	4618      	mov	r0, r3
 8002de2:	f000 fabb 	bl	800335c <RCCEx_PLLSAI1_Config>
 8002de6:	4603      	mov	r3, r0
 8002de8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dea:	e00c      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3320      	adds	r3, #32
 8002df0:	2100      	movs	r1, #0
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 fba6 	bl	8003544 <RCCEx_PLLSAI2_Config>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dfc:	e003      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	74fb      	strb	r3, [r7, #19]
      break;
 8002e02:	e000      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002e04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e06:	7cfb      	ldrb	r3, [r7, #19]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10b      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e0c:	4b76      	ldr	r3, [pc, #472]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e12:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e1a:	4973      	ldr	r1, [pc, #460]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002e22:	e001      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e24:	7cfb      	ldrb	r3, [r7, #19]
 8002e26:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d041      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e38:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002e3c:	d02a      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002e3e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002e42:	d824      	bhi.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002e44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e48:	d008      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002e4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e4e:	d81e      	bhi.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00a      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002e54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e58:	d010      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e5a:	e018      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e5c:	4b62      	ldr	r3, [pc, #392]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	4a61      	ldr	r2, [pc, #388]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e66:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e68:	e015      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	2100      	movs	r1, #0
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 fa73 	bl	800335c <RCCEx_PLLSAI1_Config>
 8002e76:	4603      	mov	r3, r0
 8002e78:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e7a:	e00c      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3320      	adds	r3, #32
 8002e80:	2100      	movs	r1, #0
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 fb5e 	bl	8003544 <RCCEx_PLLSAI2_Config>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e8c:	e003      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	74fb      	strb	r3, [r7, #19]
      break;
 8002e92:	e000      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002e94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e96:	7cfb      	ldrb	r3, [r7, #19]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10b      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e9c:	4b52      	ldr	r3, [pc, #328]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002eaa:	494f      	ldr	r1, [pc, #316]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002eb2:	e001      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb4:	7cfb      	ldrb	r3, [r7, #19]
 8002eb6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 80a0 	beq.w	8003006 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002eca:	4b47      	ldr	r3, [pc, #284]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ece:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e000      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002eda:	2300      	movs	r3, #0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00d      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ee0:	4b41      	ldr	r3, [pc, #260]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee4:	4a40      	ldr	r2, [pc, #256]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ee6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eea:	6593      	str	r3, [r2, #88]	@ 0x58
 8002eec:	4b3e      	ldr	r3, [pc, #248]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002efc:	4b3b      	ldr	r3, [pc, #236]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a3a      	ldr	r2, [pc, #232]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f08:	f7fe f8ae 	bl	8001068 <HAL_GetTick>
 8002f0c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f0e:	e009      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f10:	f7fe f8aa 	bl	8001068 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d902      	bls.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	74fb      	strb	r3, [r7, #19]
        break;
 8002f22:	e005      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f24:	4b31      	ldr	r3, [pc, #196]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0ef      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002f30:	7cfb      	ldrb	r3, [r7, #19]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d15c      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f36:	4b2c      	ldr	r3, [pc, #176]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f40:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d01f      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d019      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f54:	4b24      	ldr	r3, [pc, #144]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f60:	4b21      	ldr	r3, [pc, #132]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f66:	4a20      	ldr	r2, [pc, #128]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f70:	4b1d      	ldr	r3, [pc, #116]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f76:	4a1c      	ldr	r2, [pc, #112]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f80:	4a19      	ldr	r2, [pc, #100]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d016      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f92:	f7fe f869 	bl	8001068 <HAL_GetTick>
 8002f96:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f98:	e00b      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9a:	f7fe f865 	bl	8001068 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d902      	bls.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	74fb      	strb	r3, [r7, #19]
            break;
 8002fb0:	e006      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0ec      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002fc0:	7cfb      	ldrb	r3, [r7, #19]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10c      	bne.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fc6:	4b08      	ldr	r3, [pc, #32]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fcc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fd6:	4904      	ldr	r1, [pc, #16]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002fde:	e009      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fe0:	7cfb      	ldrb	r3, [r7, #19]
 8002fe2:	74bb      	strb	r3, [r7, #18]
 8002fe4:	e006      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002fe6:	bf00      	nop
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff0:	7cfb      	ldrb	r3, [r7, #19]
 8002ff2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ff4:	7c7b      	ldrb	r3, [r7, #17]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d105      	bne.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ffa:	4b9e      	ldr	r3, [pc, #632]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ffe:	4a9d      	ldr	r2, [pc, #628]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003000:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003004:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00a      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003012:	4b98      	ldr	r3, [pc, #608]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003014:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003018:	f023 0203 	bic.w	r2, r3, #3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003020:	4994      	ldr	r1, [pc, #592]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00a      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003034:	4b8f      	ldr	r3, [pc, #572]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800303a:	f023 020c 	bic.w	r2, r3, #12
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003042:	498c      	ldr	r1, [pc, #560]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003044:	4313      	orrs	r3, r2
 8003046:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00a      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003056:	4b87      	ldr	r3, [pc, #540]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800305c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003064:	4983      	ldr	r1, [pc, #524]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003066:	4313      	orrs	r3, r2
 8003068:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0308 	and.w	r3, r3, #8
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00a      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003078:	4b7e      	ldr	r3, [pc, #504]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800307a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800307e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003086:	497b      	ldr	r1, [pc, #492]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003088:	4313      	orrs	r3, r2
 800308a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0310 	and.w	r3, r3, #16
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00a      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800309a:	4b76      	ldr	r3, [pc, #472]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800309c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030a8:	4972      	ldr	r1, [pc, #456]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0320 	and.w	r3, r3, #32
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00a      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030bc:	4b6d      	ldr	r3, [pc, #436]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ca:	496a      	ldr	r1, [pc, #424]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00a      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030de:	4b65      	ldr	r3, [pc, #404]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030e4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ec:	4961      	ldr	r1, [pc, #388]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00a      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003100:	4b5c      	ldr	r3, [pc, #368]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003106:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800310e:	4959      	ldr	r1, [pc, #356]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003110:	4313      	orrs	r3, r2
 8003112:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003122:	4b54      	ldr	r3, [pc, #336]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003128:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003130:	4950      	ldr	r1, [pc, #320]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003132:	4313      	orrs	r3, r2
 8003134:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00a      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003144:	4b4b      	ldr	r3, [pc, #300]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800314a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003152:	4948      	ldr	r1, [pc, #288]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003166:	4b43      	ldr	r3, [pc, #268]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800316c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003174:	493f      	ldr	r1, [pc, #252]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003176:	4313      	orrs	r3, r2
 8003178:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d028      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003188:	4b3a      	ldr	r3, [pc, #232]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800318e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003196:	4937      	ldr	r1, [pc, #220]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031a6:	d106      	bne.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031a8:	4b32      	ldr	r3, [pc, #200]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	4a31      	ldr	r2, [pc, #196]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031b2:	60d3      	str	r3, [r2, #12]
 80031b4:	e011      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80031be:	d10c      	bne.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3304      	adds	r3, #4
 80031c4:	2101      	movs	r1, #1
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 f8c8 	bl	800335c <RCCEx_PLLSAI1_Config>
 80031cc:	4603      	mov	r3, r0
 80031ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80031d0:	7cfb      	ldrb	r3, [r7, #19]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80031d6:	7cfb      	ldrb	r3, [r7, #19]
 80031d8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d028      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80031e6:	4b23      	ldr	r3, [pc, #140]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ec:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f4:	491f      	ldr	r1, [pc, #124]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003200:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003204:	d106      	bne.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003206:	4b1b      	ldr	r3, [pc, #108]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	4a1a      	ldr	r2, [pc, #104]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003210:	60d3      	str	r3, [r2, #12]
 8003212:	e011      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003218:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800321c:	d10c      	bne.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	3304      	adds	r3, #4
 8003222:	2101      	movs	r1, #1
 8003224:	4618      	mov	r0, r3
 8003226:	f000 f899 	bl	800335c <RCCEx_PLLSAI1_Config>
 800322a:	4603      	mov	r3, r0
 800322c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800322e:	7cfb      	ldrb	r3, [r7, #19]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003234:	7cfb      	ldrb	r3, [r7, #19]
 8003236:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d02b      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003244:	4b0b      	ldr	r3, [pc, #44]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800324a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003252:	4908      	ldr	r1, [pc, #32]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003254:	4313      	orrs	r3, r2
 8003256:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800325e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003262:	d109      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003264:	4b03      	ldr	r3, [pc, #12]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	4a02      	ldr	r2, [pc, #8]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800326a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800326e:	60d3      	str	r3, [r2, #12]
 8003270:	e014      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003272:	bf00      	nop
 8003274:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800327c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003280:	d10c      	bne.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3304      	adds	r3, #4
 8003286:	2101      	movs	r1, #1
 8003288:	4618      	mov	r0, r3
 800328a:	f000 f867 	bl	800335c <RCCEx_PLLSAI1_Config>
 800328e:	4603      	mov	r3, r0
 8003290:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003292:	7cfb      	ldrb	r3, [r7, #19]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003298:	7cfb      	ldrb	r3, [r7, #19]
 800329a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d02f      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ae:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032b6:	4928      	ldr	r1, [pc, #160]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032c6:	d10d      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3304      	adds	r3, #4
 80032cc:	2102      	movs	r1, #2
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 f844 	bl	800335c <RCCEx_PLLSAI1_Config>
 80032d4:	4603      	mov	r3, r0
 80032d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032d8:	7cfb      	ldrb	r3, [r7, #19]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d014      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80032de:	7cfb      	ldrb	r3, [r7, #19]
 80032e0:	74bb      	strb	r3, [r7, #18]
 80032e2:	e011      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032ec:	d10c      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3320      	adds	r3, #32
 80032f2:	2102      	movs	r1, #2
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 f925 	bl	8003544 <RCCEx_PLLSAI2_Config>
 80032fa:	4603      	mov	r3, r0
 80032fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032fe:	7cfb      	ldrb	r3, [r7, #19]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003304:	7cfb      	ldrb	r3, [r7, #19]
 8003306:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00a      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003314:	4b10      	ldr	r3, [pc, #64]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800331a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003322:	490d      	ldr	r1, [pc, #52]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003324:	4313      	orrs	r3, r2
 8003326:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00b      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003336:	4b08      	ldr	r3, [pc, #32]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800333c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003346:	4904      	ldr	r1, [pc, #16]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003348:	4313      	orrs	r3, r2
 800334a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800334e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40021000 	.word	0x40021000

0800335c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003366:	2300      	movs	r3, #0
 8003368:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800336a:	4b75      	ldr	r3, [pc, #468]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d018      	beq.n	80033a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003376:	4b72      	ldr	r3, [pc, #456]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f003 0203 	and.w	r2, r3, #3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	429a      	cmp	r2, r3
 8003384:	d10d      	bne.n	80033a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
       ||
 800338a:	2b00      	cmp	r3, #0
 800338c:	d009      	beq.n	80033a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800338e:	4b6c      	ldr	r3, [pc, #432]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	091b      	lsrs	r3, r3, #4
 8003394:	f003 0307 	and.w	r3, r3, #7
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
       ||
 800339e:	429a      	cmp	r2, r3
 80033a0:	d047      	beq.n	8003432 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	73fb      	strb	r3, [r7, #15]
 80033a6:	e044      	b.n	8003432 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2b03      	cmp	r3, #3
 80033ae:	d018      	beq.n	80033e2 <RCCEx_PLLSAI1_Config+0x86>
 80033b0:	2b03      	cmp	r3, #3
 80033b2:	d825      	bhi.n	8003400 <RCCEx_PLLSAI1_Config+0xa4>
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d002      	beq.n	80033be <RCCEx_PLLSAI1_Config+0x62>
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d009      	beq.n	80033d0 <RCCEx_PLLSAI1_Config+0x74>
 80033bc:	e020      	b.n	8003400 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033be:	4b60      	ldr	r3, [pc, #384]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d11d      	bne.n	8003406 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033ce:	e01a      	b.n	8003406 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033d0:	4b5b      	ldr	r3, [pc, #364]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d116      	bne.n	800340a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033e0:	e013      	b.n	800340a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033e2:	4b57      	ldr	r3, [pc, #348]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10f      	bne.n	800340e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033ee:	4b54      	ldr	r3, [pc, #336]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d109      	bne.n	800340e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033fe:	e006      	b.n	800340e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	73fb      	strb	r3, [r7, #15]
      break;
 8003404:	e004      	b.n	8003410 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003406:	bf00      	nop
 8003408:	e002      	b.n	8003410 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800340a:	bf00      	nop
 800340c:	e000      	b.n	8003410 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800340e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003410:	7bfb      	ldrb	r3, [r7, #15]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10d      	bne.n	8003432 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003416:	4b4a      	ldr	r3, [pc, #296]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6819      	ldr	r1, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	3b01      	subs	r3, #1
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	430b      	orrs	r3, r1
 800342c:	4944      	ldr	r1, [pc, #272]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 800342e:	4313      	orrs	r3, r2
 8003430:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003432:	7bfb      	ldrb	r3, [r7, #15]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d17d      	bne.n	8003534 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003438:	4b41      	ldr	r3, [pc, #260]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a40      	ldr	r2, [pc, #256]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 800343e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003442:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003444:	f7fd fe10 	bl	8001068 <HAL_GetTick>
 8003448:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800344a:	e009      	b.n	8003460 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800344c:	f7fd fe0c 	bl	8001068 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d902      	bls.n	8003460 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	73fb      	strb	r3, [r7, #15]
        break;
 800345e:	e005      	b.n	800346c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003460:	4b37      	ldr	r3, [pc, #220]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1ef      	bne.n	800344c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800346c:	7bfb      	ldrb	r3, [r7, #15]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d160      	bne.n	8003534 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d111      	bne.n	800349c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003478:	4b31      	ldr	r3, [pc, #196]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003480:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6892      	ldr	r2, [r2, #8]
 8003488:	0211      	lsls	r1, r2, #8
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	68d2      	ldr	r2, [r2, #12]
 800348e:	0912      	lsrs	r2, r2, #4
 8003490:	0452      	lsls	r2, r2, #17
 8003492:	430a      	orrs	r2, r1
 8003494:	492a      	ldr	r1, [pc, #168]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003496:	4313      	orrs	r3, r2
 8003498:	610b      	str	r3, [r1, #16]
 800349a:	e027      	b.n	80034ec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d112      	bne.n	80034c8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034a2:	4b27      	ldr	r3, [pc, #156]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80034aa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6892      	ldr	r2, [r2, #8]
 80034b2:	0211      	lsls	r1, r2, #8
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6912      	ldr	r2, [r2, #16]
 80034b8:	0852      	lsrs	r2, r2, #1
 80034ba:	3a01      	subs	r2, #1
 80034bc:	0552      	lsls	r2, r2, #21
 80034be:	430a      	orrs	r2, r1
 80034c0:	491f      	ldr	r1, [pc, #124]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	610b      	str	r3, [r1, #16]
 80034c6:	e011      	b.n	80034ec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80034d0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6892      	ldr	r2, [r2, #8]
 80034d8:	0211      	lsls	r1, r2, #8
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	6952      	ldr	r2, [r2, #20]
 80034de:	0852      	lsrs	r2, r2, #1
 80034e0:	3a01      	subs	r2, #1
 80034e2:	0652      	lsls	r2, r2, #25
 80034e4:	430a      	orrs	r2, r1
 80034e6:	4916      	ldr	r1, [pc, #88]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80034ec:	4b14      	ldr	r3, [pc, #80]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a13      	ldr	r2, [pc, #76]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034f2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80034f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f8:	f7fd fdb6 	bl	8001068 <HAL_GetTick>
 80034fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034fe:	e009      	b.n	8003514 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003500:	f7fd fdb2 	bl	8001068 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d902      	bls.n	8003514 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	73fb      	strb	r3, [r7, #15]
          break;
 8003512:	e005      	b.n	8003520 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003514:	4b0a      	ldr	r3, [pc, #40]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0ef      	beq.n	8003500 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003520:	7bfb      	ldrb	r3, [r7, #15]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d106      	bne.n	8003534 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003526:	4b06      	ldr	r3, [pc, #24]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003528:	691a      	ldr	r2, [r3, #16]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	4904      	ldr	r1, [pc, #16]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003530:	4313      	orrs	r3, r2
 8003532:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003534:	7bfb      	ldrb	r3, [r7, #15]
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40021000 	.word	0x40021000

08003544 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800354e:	2300      	movs	r3, #0
 8003550:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003552:	4b6a      	ldr	r3, [pc, #424]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d018      	beq.n	8003590 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800355e:	4b67      	ldr	r3, [pc, #412]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	f003 0203 	and.w	r2, r3, #3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	429a      	cmp	r2, r3
 800356c:	d10d      	bne.n	800358a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
       ||
 8003572:	2b00      	cmp	r3, #0
 8003574:	d009      	beq.n	800358a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003576:	4b61      	ldr	r3, [pc, #388]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	091b      	lsrs	r3, r3, #4
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
       ||
 8003586:	429a      	cmp	r2, r3
 8003588:	d047      	beq.n	800361a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	73fb      	strb	r3, [r7, #15]
 800358e:	e044      	b.n	800361a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b03      	cmp	r3, #3
 8003596:	d018      	beq.n	80035ca <RCCEx_PLLSAI2_Config+0x86>
 8003598:	2b03      	cmp	r3, #3
 800359a:	d825      	bhi.n	80035e8 <RCCEx_PLLSAI2_Config+0xa4>
 800359c:	2b01      	cmp	r3, #1
 800359e:	d002      	beq.n	80035a6 <RCCEx_PLLSAI2_Config+0x62>
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d009      	beq.n	80035b8 <RCCEx_PLLSAI2_Config+0x74>
 80035a4:	e020      	b.n	80035e8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035a6:	4b55      	ldr	r3, [pc, #340]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d11d      	bne.n	80035ee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035b6:	e01a      	b.n	80035ee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035b8:	4b50      	ldr	r3, [pc, #320]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d116      	bne.n	80035f2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035c8:	e013      	b.n	80035f2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035ca:	4b4c      	ldr	r3, [pc, #304]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10f      	bne.n	80035f6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035d6:	4b49      	ldr	r3, [pc, #292]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d109      	bne.n	80035f6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035e6:	e006      	b.n	80035f6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	73fb      	strb	r3, [r7, #15]
      break;
 80035ec:	e004      	b.n	80035f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80035ee:	bf00      	nop
 80035f0:	e002      	b.n	80035f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80035f2:	bf00      	nop
 80035f4:	e000      	b.n	80035f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80035f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10d      	bne.n	800361a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80035fe:	4b3f      	ldr	r3, [pc, #252]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6819      	ldr	r1, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	3b01      	subs	r3, #1
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	430b      	orrs	r3, r1
 8003614:	4939      	ldr	r1, [pc, #228]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003616:	4313      	orrs	r3, r2
 8003618:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800361a:	7bfb      	ldrb	r3, [r7, #15]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d167      	bne.n	80036f0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003620:	4b36      	ldr	r3, [pc, #216]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a35      	ldr	r2, [pc, #212]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003626:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800362a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800362c:	f7fd fd1c 	bl	8001068 <HAL_GetTick>
 8003630:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003632:	e009      	b.n	8003648 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003634:	f7fd fd18 	bl	8001068 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d902      	bls.n	8003648 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	73fb      	strb	r3, [r7, #15]
        break;
 8003646:	e005      	b.n	8003654 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003648:	4b2c      	ldr	r3, [pc, #176]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1ef      	bne.n	8003634 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003654:	7bfb      	ldrb	r3, [r7, #15]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d14a      	bne.n	80036f0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d111      	bne.n	8003684 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003660:	4b26      	ldr	r3, [pc, #152]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003668:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	6892      	ldr	r2, [r2, #8]
 8003670:	0211      	lsls	r1, r2, #8
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	68d2      	ldr	r2, [r2, #12]
 8003676:	0912      	lsrs	r2, r2, #4
 8003678:	0452      	lsls	r2, r2, #17
 800367a:	430a      	orrs	r2, r1
 800367c:	491f      	ldr	r1, [pc, #124]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800367e:	4313      	orrs	r3, r2
 8003680:	614b      	str	r3, [r1, #20]
 8003682:	e011      	b.n	80036a8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003684:	4b1d      	ldr	r3, [pc, #116]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800368c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6892      	ldr	r2, [r2, #8]
 8003694:	0211      	lsls	r1, r2, #8
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	6912      	ldr	r2, [r2, #16]
 800369a:	0852      	lsrs	r2, r2, #1
 800369c:	3a01      	subs	r2, #1
 800369e:	0652      	lsls	r2, r2, #25
 80036a0:	430a      	orrs	r2, r1
 80036a2:	4916      	ldr	r1, [pc, #88]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80036a8:	4b14      	ldr	r3, [pc, #80]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a13      	ldr	r2, [pc, #76]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b4:	f7fd fcd8 	bl	8001068 <HAL_GetTick>
 80036b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80036ba:	e009      	b.n	80036d0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036bc:	f7fd fcd4 	bl	8001068 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d902      	bls.n	80036d0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	73fb      	strb	r3, [r7, #15]
          break;
 80036ce:	e005      	b.n	80036dc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80036d0:	4b0a      	ldr	r3, [pc, #40]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0ef      	beq.n	80036bc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d106      	bne.n	80036f0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80036e2:	4b06      	ldr	r3, [pc, #24]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80036e4:	695a      	ldr	r2, [r3, #20]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	4904      	ldr	r1, [pc, #16]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	40021000 	.word	0x40021000

08003700 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e049      	b.n	80037a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d106      	bne.n	800372c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7fd fb30 	bl	8000d8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3304      	adds	r3, #4
 800373c:	4619      	mov	r1, r3
 800373e:	4610      	mov	r0, r2
 8003740:	f000 f964 	bl	8003a0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
	...

080037b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d001      	beq.n	80037c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e047      	b.n	8003858 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a23      	ldr	r2, [pc, #140]	@ (8003864 <HAL_TIM_Base_Start+0xb4>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d01d      	beq.n	8003816 <HAL_TIM_Base_Start+0x66>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037e2:	d018      	beq.n	8003816 <HAL_TIM_Base_Start+0x66>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a1f      	ldr	r2, [pc, #124]	@ (8003868 <HAL_TIM_Base_Start+0xb8>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d013      	beq.n	8003816 <HAL_TIM_Base_Start+0x66>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a1e      	ldr	r2, [pc, #120]	@ (800386c <HAL_TIM_Base_Start+0xbc>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d00e      	beq.n	8003816 <HAL_TIM_Base_Start+0x66>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a1c      	ldr	r2, [pc, #112]	@ (8003870 <HAL_TIM_Base_Start+0xc0>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d009      	beq.n	8003816 <HAL_TIM_Base_Start+0x66>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a1b      	ldr	r2, [pc, #108]	@ (8003874 <HAL_TIM_Base_Start+0xc4>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d004      	beq.n	8003816 <HAL_TIM_Base_Start+0x66>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a19      	ldr	r2, [pc, #100]	@ (8003878 <HAL_TIM_Base_Start+0xc8>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d115      	bne.n	8003842 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	4b17      	ldr	r3, [pc, #92]	@ (800387c <HAL_TIM_Base_Start+0xcc>)
 800381e:	4013      	ands	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2b06      	cmp	r3, #6
 8003826:	d015      	beq.n	8003854 <HAL_TIM_Base_Start+0xa4>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800382e:	d011      	beq.n	8003854 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f042 0201 	orr.w	r2, r2, #1
 800383e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003840:	e008      	b.n	8003854 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f042 0201 	orr.w	r2, r2, #1
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	e000      	b.n	8003856 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003854:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	40012c00 	.word	0x40012c00
 8003868:	40000400 	.word	0x40000400
 800386c:	40000800 	.word	0x40000800
 8003870:	40000c00 	.word	0x40000c00
 8003874:	40013400 	.word	0x40013400
 8003878:	40014000 	.word	0x40014000
 800387c:	00010007 	.word	0x00010007

08003880 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003890:	2b01      	cmp	r3, #1
 8003892:	d101      	bne.n	8003898 <HAL_TIM_ConfigClockSource+0x18>
 8003894:	2302      	movs	r3, #2
 8003896:	e0b5      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x184>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2202      	movs	r2, #2
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038b6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80038ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038c2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038d4:	d03e      	beq.n	8003954 <HAL_TIM_ConfigClockSource+0xd4>
 80038d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038da:	f200 8087 	bhi.w	80039ec <HAL_TIM_ConfigClockSource+0x16c>
 80038de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038e2:	f000 8085 	beq.w	80039f0 <HAL_TIM_ConfigClockSource+0x170>
 80038e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038ea:	d87f      	bhi.n	80039ec <HAL_TIM_ConfigClockSource+0x16c>
 80038ec:	2b70      	cmp	r3, #112	@ 0x70
 80038ee:	d01a      	beq.n	8003926 <HAL_TIM_ConfigClockSource+0xa6>
 80038f0:	2b70      	cmp	r3, #112	@ 0x70
 80038f2:	d87b      	bhi.n	80039ec <HAL_TIM_ConfigClockSource+0x16c>
 80038f4:	2b60      	cmp	r3, #96	@ 0x60
 80038f6:	d050      	beq.n	800399a <HAL_TIM_ConfigClockSource+0x11a>
 80038f8:	2b60      	cmp	r3, #96	@ 0x60
 80038fa:	d877      	bhi.n	80039ec <HAL_TIM_ConfigClockSource+0x16c>
 80038fc:	2b50      	cmp	r3, #80	@ 0x50
 80038fe:	d03c      	beq.n	800397a <HAL_TIM_ConfigClockSource+0xfa>
 8003900:	2b50      	cmp	r3, #80	@ 0x50
 8003902:	d873      	bhi.n	80039ec <HAL_TIM_ConfigClockSource+0x16c>
 8003904:	2b40      	cmp	r3, #64	@ 0x40
 8003906:	d058      	beq.n	80039ba <HAL_TIM_ConfigClockSource+0x13a>
 8003908:	2b40      	cmp	r3, #64	@ 0x40
 800390a:	d86f      	bhi.n	80039ec <HAL_TIM_ConfigClockSource+0x16c>
 800390c:	2b30      	cmp	r3, #48	@ 0x30
 800390e:	d064      	beq.n	80039da <HAL_TIM_ConfigClockSource+0x15a>
 8003910:	2b30      	cmp	r3, #48	@ 0x30
 8003912:	d86b      	bhi.n	80039ec <HAL_TIM_ConfigClockSource+0x16c>
 8003914:	2b20      	cmp	r3, #32
 8003916:	d060      	beq.n	80039da <HAL_TIM_ConfigClockSource+0x15a>
 8003918:	2b20      	cmp	r3, #32
 800391a:	d867      	bhi.n	80039ec <HAL_TIM_ConfigClockSource+0x16c>
 800391c:	2b00      	cmp	r3, #0
 800391e:	d05c      	beq.n	80039da <HAL_TIM_ConfigClockSource+0x15a>
 8003920:	2b10      	cmp	r3, #16
 8003922:	d05a      	beq.n	80039da <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003924:	e062      	b.n	80039ec <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6818      	ldr	r0, [r3, #0]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	6899      	ldr	r1, [r3, #8]
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f000 f97d 	bl	8003c34 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003948:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	609a      	str	r2, [r3, #8]
      break;
 8003952:	e04e      	b.n	80039f2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6818      	ldr	r0, [r3, #0]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	6899      	ldr	r1, [r3, #8]
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f000 f966 	bl	8003c34 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689a      	ldr	r2, [r3, #8]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003976:	609a      	str	r2, [r3, #8]
      break;
 8003978:	e03b      	b.n	80039f2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6818      	ldr	r0, [r3, #0]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	6859      	ldr	r1, [r3, #4]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	461a      	mov	r2, r3
 8003988:	f000 f8da 	bl	8003b40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2150      	movs	r1, #80	@ 0x50
 8003992:	4618      	mov	r0, r3
 8003994:	f000 f933 	bl	8003bfe <TIM_ITRx_SetConfig>
      break;
 8003998:	e02b      	b.n	80039f2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6818      	ldr	r0, [r3, #0]
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	6859      	ldr	r1, [r3, #4]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	461a      	mov	r2, r3
 80039a8:	f000 f8f9 	bl	8003b9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2160      	movs	r1, #96	@ 0x60
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 f923 	bl	8003bfe <TIM_ITRx_SetConfig>
      break;
 80039b8:	e01b      	b.n	80039f2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6818      	ldr	r0, [r3, #0]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	6859      	ldr	r1, [r3, #4]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	461a      	mov	r2, r3
 80039c8:	f000 f8ba 	bl	8003b40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2140      	movs	r1, #64	@ 0x40
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 f913 	bl	8003bfe <TIM_ITRx_SetConfig>
      break;
 80039d8:	e00b      	b.n	80039f2 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4619      	mov	r1, r3
 80039e4:	4610      	mov	r0, r2
 80039e6:	f000 f90a 	bl	8003bfe <TIM_ITRx_SetConfig>
        break;
 80039ea:	e002      	b.n	80039f2 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80039ec:	bf00      	nop
 80039ee:	e000      	b.n	80039f2 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80039f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a40      	ldr	r2, [pc, #256]	@ (8003b20 <TIM_Base_SetConfig+0x114>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d013      	beq.n	8003a4c <TIM_Base_SetConfig+0x40>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a2a:	d00f      	beq.n	8003a4c <TIM_Base_SetConfig+0x40>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a3d      	ldr	r2, [pc, #244]	@ (8003b24 <TIM_Base_SetConfig+0x118>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d00b      	beq.n	8003a4c <TIM_Base_SetConfig+0x40>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a3c      	ldr	r2, [pc, #240]	@ (8003b28 <TIM_Base_SetConfig+0x11c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d007      	beq.n	8003a4c <TIM_Base_SetConfig+0x40>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a3b      	ldr	r2, [pc, #236]	@ (8003b2c <TIM_Base_SetConfig+0x120>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d003      	beq.n	8003a4c <TIM_Base_SetConfig+0x40>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a3a      	ldr	r2, [pc, #232]	@ (8003b30 <TIM_Base_SetConfig+0x124>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d108      	bne.n	8003a5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a2f      	ldr	r2, [pc, #188]	@ (8003b20 <TIM_Base_SetConfig+0x114>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d01f      	beq.n	8003aa6 <TIM_Base_SetConfig+0x9a>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a6c:	d01b      	beq.n	8003aa6 <TIM_Base_SetConfig+0x9a>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a2c      	ldr	r2, [pc, #176]	@ (8003b24 <TIM_Base_SetConfig+0x118>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d017      	beq.n	8003aa6 <TIM_Base_SetConfig+0x9a>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a2b      	ldr	r2, [pc, #172]	@ (8003b28 <TIM_Base_SetConfig+0x11c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d013      	beq.n	8003aa6 <TIM_Base_SetConfig+0x9a>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a2a      	ldr	r2, [pc, #168]	@ (8003b2c <TIM_Base_SetConfig+0x120>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d00f      	beq.n	8003aa6 <TIM_Base_SetConfig+0x9a>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a29      	ldr	r2, [pc, #164]	@ (8003b30 <TIM_Base_SetConfig+0x124>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d00b      	beq.n	8003aa6 <TIM_Base_SetConfig+0x9a>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a28      	ldr	r2, [pc, #160]	@ (8003b34 <TIM_Base_SetConfig+0x128>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d007      	beq.n	8003aa6 <TIM_Base_SetConfig+0x9a>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a27      	ldr	r2, [pc, #156]	@ (8003b38 <TIM_Base_SetConfig+0x12c>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d003      	beq.n	8003aa6 <TIM_Base_SetConfig+0x9a>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a26      	ldr	r2, [pc, #152]	@ (8003b3c <TIM_Base_SetConfig+0x130>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d108      	bne.n	8003ab8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a10      	ldr	r2, [pc, #64]	@ (8003b20 <TIM_Base_SetConfig+0x114>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d00f      	beq.n	8003b04 <TIM_Base_SetConfig+0xf8>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a12      	ldr	r2, [pc, #72]	@ (8003b30 <TIM_Base_SetConfig+0x124>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d00b      	beq.n	8003b04 <TIM_Base_SetConfig+0xf8>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a11      	ldr	r2, [pc, #68]	@ (8003b34 <TIM_Base_SetConfig+0x128>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d007      	beq.n	8003b04 <TIM_Base_SetConfig+0xf8>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a10      	ldr	r2, [pc, #64]	@ (8003b38 <TIM_Base_SetConfig+0x12c>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d003      	beq.n	8003b04 <TIM_Base_SetConfig+0xf8>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a0f      	ldr	r2, [pc, #60]	@ (8003b3c <TIM_Base_SetConfig+0x130>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d103      	bne.n	8003b0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	691a      	ldr	r2, [r3, #16]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	615a      	str	r2, [r3, #20]
}
 8003b12:	bf00      	nop
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	40012c00 	.word	0x40012c00
 8003b24:	40000400 	.word	0x40000400
 8003b28:	40000800 	.word	0x40000800
 8003b2c:	40000c00 	.word	0x40000c00
 8003b30:	40013400 	.word	0x40013400
 8003b34:	40014000 	.word	0x40014000
 8003b38:	40014400 	.word	0x40014400
 8003b3c:	40014800 	.word	0x40014800

08003b40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	f023 0201 	bic.w	r2, r3, #1
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	011b      	lsls	r3, r3, #4
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f023 030a 	bic.w	r3, r3, #10
 8003b7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	621a      	str	r2, [r3, #32]
}
 8003b92:	bf00      	nop
 8003b94:	371c      	adds	r7, #28
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b087      	sub	sp, #28
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	60f8      	str	r0, [r7, #12]
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	f023 0210 	bic.w	r2, r3, #16
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003bc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	031b      	lsls	r3, r3, #12
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003bda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	011b      	lsls	r3, r3, #4
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	621a      	str	r2, [r3, #32]
}
 8003bf2:	bf00      	nop
 8003bf4:	371c      	adds	r7, #28
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b085      	sub	sp, #20
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f043 0307 	orr.w	r3, r3, #7
 8003c20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	609a      	str	r2, [r3, #8]
}
 8003c28:	bf00      	nop
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
 8003c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	021a      	lsls	r2, r3, #8
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	431a      	orrs	r2, r3
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	609a      	str	r2, [r3, #8]
}
 8003c68:	bf00      	nop
 8003c6a:	371c      	adds	r7, #28
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d101      	bne.n	8003c8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c88:	2302      	movs	r3, #2
 8003c8a:	e068      	b.n	8003d5e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a2e      	ldr	r2, [pc, #184]	@ (8003d6c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d004      	beq.n	8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a2d      	ldr	r2, [pc, #180]	@ (8003d70 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d108      	bne.n	8003cd2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003cc6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cd8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a1e      	ldr	r2, [pc, #120]	@ (8003d6c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d01d      	beq.n	8003d32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cfe:	d018      	beq.n	8003d32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a1b      	ldr	r2, [pc, #108]	@ (8003d74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d013      	beq.n	8003d32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a1a      	ldr	r2, [pc, #104]	@ (8003d78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d00e      	beq.n	8003d32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a18      	ldr	r2, [pc, #96]	@ (8003d7c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d009      	beq.n	8003d32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a13      	ldr	r2, [pc, #76]	@ (8003d70 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d004      	beq.n	8003d32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a14      	ldr	r2, [pc, #80]	@ (8003d80 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d10c      	bne.n	8003d4c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	68ba      	ldr	r2, [r7, #8]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	40012c00 	.word	0x40012c00
 8003d70:	40013400 	.word	0x40013400
 8003d74:	40000400 	.word	0x40000400
 8003d78:	40000800 	.word	0x40000800
 8003d7c:	40000c00 	.word	0x40000c00
 8003d80:	40014000 	.word	0x40014000

08003d84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e040      	b.n	8003e18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d106      	bne.n	8003dac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7fd f810 	bl	8000dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2224      	movs	r2, #36	@ 0x24
 8003db0:	675a      	str	r2, [r3, #116]	@ 0x74

  __HAL_UART_DISABLE(huart);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0201 	bic.w	r2, r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f82c 	bl	8003e20 <UART_SetConfig>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d101      	bne.n	8003dd2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e022      	b.n	8003e18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d002      	beq.n	8003de0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 fada 	bl	8004394 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003dee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689a      	ldr	r2, [r3, #8]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003dfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f042 0201 	orr.w	r2, r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 fb61 	bl	80044d8 <UART_CheckIdleState>
 8003e16:	4603      	mov	r3, r0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e24:	b08a      	sub	sp, #40	@ 0x28
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	69db      	ldr	r3, [r3, #28]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	627b      	str	r3, [r7, #36]	@ 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	4ba4      	ldr	r3, [pc, #656]	@ (80040e0 <UART_SetConfig+0x2c0>)
 8003e50:	4013      	ands	r3, r2
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	6812      	ldr	r2, [r2, #0]
 8003e56:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e58:	430b      	orrs	r3, r1
 8003e5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a99      	ldr	r2, [pc, #612]	@ (80040e4 <UART_SetConfig+0x2c4>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d004      	beq.n	8003e8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a90      	ldr	r2, [pc, #576]	@ (80040e8 <UART_SetConfig+0x2c8>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d126      	bne.n	8003ef8 <UART_SetConfig+0xd8>
 8003eaa:	4b90      	ldr	r3, [pc, #576]	@ (80040ec <UART_SetConfig+0x2cc>)
 8003eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb0:	f003 0303 	and.w	r3, r3, #3
 8003eb4:	2b03      	cmp	r3, #3
 8003eb6:	d81b      	bhi.n	8003ef0 <UART_SetConfig+0xd0>
 8003eb8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ec0 <UART_SetConfig+0xa0>)
 8003eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebe:	bf00      	nop
 8003ec0:	08003ed1 	.word	0x08003ed1
 8003ec4:	08003ee1 	.word	0x08003ee1
 8003ec8:	08003ed9 	.word	0x08003ed9
 8003ecc:	08003ee9 	.word	0x08003ee9
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ed6:	e116      	b.n	8004106 <UART_SetConfig+0x2e6>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ede:	e112      	b.n	8004106 <UART_SetConfig+0x2e6>
 8003ee0:	2304      	movs	r3, #4
 8003ee2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ee6:	e10e      	b.n	8004106 <UART_SetConfig+0x2e6>
 8003ee8:	2308      	movs	r3, #8
 8003eea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eee:	e10a      	b.n	8004106 <UART_SetConfig+0x2e6>
 8003ef0:	2310      	movs	r3, #16
 8003ef2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ef6:	e106      	b.n	8004106 <UART_SetConfig+0x2e6>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a7c      	ldr	r2, [pc, #496]	@ (80040f0 <UART_SetConfig+0x2d0>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d138      	bne.n	8003f74 <UART_SetConfig+0x154>
 8003f02:	4b7a      	ldr	r3, [pc, #488]	@ (80040ec <UART_SetConfig+0x2cc>)
 8003f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f08:	f003 030c 	and.w	r3, r3, #12
 8003f0c:	2b0c      	cmp	r3, #12
 8003f0e:	d82d      	bhi.n	8003f6c <UART_SetConfig+0x14c>
 8003f10:	a201      	add	r2, pc, #4	@ (adr r2, 8003f18 <UART_SetConfig+0xf8>)
 8003f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f16:	bf00      	nop
 8003f18:	08003f4d 	.word	0x08003f4d
 8003f1c:	08003f6d 	.word	0x08003f6d
 8003f20:	08003f6d 	.word	0x08003f6d
 8003f24:	08003f6d 	.word	0x08003f6d
 8003f28:	08003f5d 	.word	0x08003f5d
 8003f2c:	08003f6d 	.word	0x08003f6d
 8003f30:	08003f6d 	.word	0x08003f6d
 8003f34:	08003f6d 	.word	0x08003f6d
 8003f38:	08003f55 	.word	0x08003f55
 8003f3c:	08003f6d 	.word	0x08003f6d
 8003f40:	08003f6d 	.word	0x08003f6d
 8003f44:	08003f6d 	.word	0x08003f6d
 8003f48:	08003f65 	.word	0x08003f65
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f52:	e0d8      	b.n	8004106 <UART_SetConfig+0x2e6>
 8003f54:	2302      	movs	r3, #2
 8003f56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f5a:	e0d4      	b.n	8004106 <UART_SetConfig+0x2e6>
 8003f5c:	2304      	movs	r3, #4
 8003f5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f62:	e0d0      	b.n	8004106 <UART_SetConfig+0x2e6>
 8003f64:	2308      	movs	r3, #8
 8003f66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f6a:	e0cc      	b.n	8004106 <UART_SetConfig+0x2e6>
 8003f6c:	2310      	movs	r3, #16
 8003f6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f72:	e0c8      	b.n	8004106 <UART_SetConfig+0x2e6>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a5e      	ldr	r2, [pc, #376]	@ (80040f4 <UART_SetConfig+0x2d4>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d125      	bne.n	8003fca <UART_SetConfig+0x1aa>
 8003f7e:	4b5b      	ldr	r3, [pc, #364]	@ (80040ec <UART_SetConfig+0x2cc>)
 8003f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f84:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003f88:	2b30      	cmp	r3, #48	@ 0x30
 8003f8a:	d016      	beq.n	8003fba <UART_SetConfig+0x19a>
 8003f8c:	2b30      	cmp	r3, #48	@ 0x30
 8003f8e:	d818      	bhi.n	8003fc2 <UART_SetConfig+0x1a2>
 8003f90:	2b20      	cmp	r3, #32
 8003f92:	d00a      	beq.n	8003faa <UART_SetConfig+0x18a>
 8003f94:	2b20      	cmp	r3, #32
 8003f96:	d814      	bhi.n	8003fc2 <UART_SetConfig+0x1a2>
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <UART_SetConfig+0x182>
 8003f9c:	2b10      	cmp	r3, #16
 8003f9e:	d008      	beq.n	8003fb2 <UART_SetConfig+0x192>
 8003fa0:	e00f      	b.n	8003fc2 <UART_SetConfig+0x1a2>
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fa8:	e0ad      	b.n	8004106 <UART_SetConfig+0x2e6>
 8003faa:	2302      	movs	r3, #2
 8003fac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fb0:	e0a9      	b.n	8004106 <UART_SetConfig+0x2e6>
 8003fb2:	2304      	movs	r3, #4
 8003fb4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fb8:	e0a5      	b.n	8004106 <UART_SetConfig+0x2e6>
 8003fba:	2308      	movs	r3, #8
 8003fbc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fc0:	e0a1      	b.n	8004106 <UART_SetConfig+0x2e6>
 8003fc2:	2310      	movs	r3, #16
 8003fc4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fc8:	e09d      	b.n	8004106 <UART_SetConfig+0x2e6>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a4a      	ldr	r2, [pc, #296]	@ (80040f8 <UART_SetConfig+0x2d8>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d125      	bne.n	8004020 <UART_SetConfig+0x200>
 8003fd4:	4b45      	ldr	r3, [pc, #276]	@ (80040ec <UART_SetConfig+0x2cc>)
 8003fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fda:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003fde:	2bc0      	cmp	r3, #192	@ 0xc0
 8003fe0:	d016      	beq.n	8004010 <UART_SetConfig+0x1f0>
 8003fe2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003fe4:	d818      	bhi.n	8004018 <UART_SetConfig+0x1f8>
 8003fe6:	2b80      	cmp	r3, #128	@ 0x80
 8003fe8:	d00a      	beq.n	8004000 <UART_SetConfig+0x1e0>
 8003fea:	2b80      	cmp	r3, #128	@ 0x80
 8003fec:	d814      	bhi.n	8004018 <UART_SetConfig+0x1f8>
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d002      	beq.n	8003ff8 <UART_SetConfig+0x1d8>
 8003ff2:	2b40      	cmp	r3, #64	@ 0x40
 8003ff4:	d008      	beq.n	8004008 <UART_SetConfig+0x1e8>
 8003ff6:	e00f      	b.n	8004018 <UART_SetConfig+0x1f8>
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ffe:	e082      	b.n	8004106 <UART_SetConfig+0x2e6>
 8004000:	2302      	movs	r3, #2
 8004002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004006:	e07e      	b.n	8004106 <UART_SetConfig+0x2e6>
 8004008:	2304      	movs	r3, #4
 800400a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800400e:	e07a      	b.n	8004106 <UART_SetConfig+0x2e6>
 8004010:	2308      	movs	r3, #8
 8004012:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004016:	e076      	b.n	8004106 <UART_SetConfig+0x2e6>
 8004018:	2310      	movs	r3, #16
 800401a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800401e:	e072      	b.n	8004106 <UART_SetConfig+0x2e6>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a35      	ldr	r2, [pc, #212]	@ (80040fc <UART_SetConfig+0x2dc>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d12a      	bne.n	8004080 <UART_SetConfig+0x260>
 800402a:	4b30      	ldr	r3, [pc, #192]	@ (80040ec <UART_SetConfig+0x2cc>)
 800402c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004030:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004034:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004038:	d01a      	beq.n	8004070 <UART_SetConfig+0x250>
 800403a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800403e:	d81b      	bhi.n	8004078 <UART_SetConfig+0x258>
 8004040:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004044:	d00c      	beq.n	8004060 <UART_SetConfig+0x240>
 8004046:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800404a:	d815      	bhi.n	8004078 <UART_SetConfig+0x258>
 800404c:	2b00      	cmp	r3, #0
 800404e:	d003      	beq.n	8004058 <UART_SetConfig+0x238>
 8004050:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004054:	d008      	beq.n	8004068 <UART_SetConfig+0x248>
 8004056:	e00f      	b.n	8004078 <UART_SetConfig+0x258>
 8004058:	2300      	movs	r3, #0
 800405a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800405e:	e052      	b.n	8004106 <UART_SetConfig+0x2e6>
 8004060:	2302      	movs	r3, #2
 8004062:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004066:	e04e      	b.n	8004106 <UART_SetConfig+0x2e6>
 8004068:	2304      	movs	r3, #4
 800406a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800406e:	e04a      	b.n	8004106 <UART_SetConfig+0x2e6>
 8004070:	2308      	movs	r3, #8
 8004072:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004076:	e046      	b.n	8004106 <UART_SetConfig+0x2e6>
 8004078:	2310      	movs	r3, #16
 800407a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800407e:	e042      	b.n	8004106 <UART_SetConfig+0x2e6>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a17      	ldr	r2, [pc, #92]	@ (80040e4 <UART_SetConfig+0x2c4>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d13a      	bne.n	8004100 <UART_SetConfig+0x2e0>
 800408a:	4b18      	ldr	r3, [pc, #96]	@ (80040ec <UART_SetConfig+0x2cc>)
 800408c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004090:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004094:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004098:	d01a      	beq.n	80040d0 <UART_SetConfig+0x2b0>
 800409a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800409e:	d81b      	bhi.n	80040d8 <UART_SetConfig+0x2b8>
 80040a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040a4:	d00c      	beq.n	80040c0 <UART_SetConfig+0x2a0>
 80040a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040aa:	d815      	bhi.n	80040d8 <UART_SetConfig+0x2b8>
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d003      	beq.n	80040b8 <UART_SetConfig+0x298>
 80040b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040b4:	d008      	beq.n	80040c8 <UART_SetConfig+0x2a8>
 80040b6:	e00f      	b.n	80040d8 <UART_SetConfig+0x2b8>
 80040b8:	2300      	movs	r3, #0
 80040ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040be:	e022      	b.n	8004106 <UART_SetConfig+0x2e6>
 80040c0:	2302      	movs	r3, #2
 80040c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040c6:	e01e      	b.n	8004106 <UART_SetConfig+0x2e6>
 80040c8:	2304      	movs	r3, #4
 80040ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040ce:	e01a      	b.n	8004106 <UART_SetConfig+0x2e6>
 80040d0:	2308      	movs	r3, #8
 80040d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040d6:	e016      	b.n	8004106 <UART_SetConfig+0x2e6>
 80040d8:	2310      	movs	r3, #16
 80040da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040de:	e012      	b.n	8004106 <UART_SetConfig+0x2e6>
 80040e0:	efff69f3 	.word	0xefff69f3
 80040e4:	40008000 	.word	0x40008000
 80040e8:	40013800 	.word	0x40013800
 80040ec:	40021000 	.word	0x40021000
 80040f0:	40004400 	.word	0x40004400
 80040f4:	40004800 	.word	0x40004800
 80040f8:	40004c00 	.word	0x40004c00
 80040fc:	40005000 	.word	0x40005000
 8004100:	2310      	movs	r3, #16
 8004102:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4aa0      	ldr	r2, [pc, #640]	@ (800438c <UART_SetConfig+0x56c>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d17a      	bne.n	8004206 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004110:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004114:	2b08      	cmp	r3, #8
 8004116:	d824      	bhi.n	8004162 <UART_SetConfig+0x342>
 8004118:	a201      	add	r2, pc, #4	@ (adr r2, 8004120 <UART_SetConfig+0x300>)
 800411a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411e:	bf00      	nop
 8004120:	08004145 	.word	0x08004145
 8004124:	08004163 	.word	0x08004163
 8004128:	0800414d 	.word	0x0800414d
 800412c:	08004163 	.word	0x08004163
 8004130:	08004153 	.word	0x08004153
 8004134:	08004163 	.word	0x08004163
 8004138:	08004163 	.word	0x08004163
 800413c:	08004163 	.word	0x08004163
 8004140:	0800415b 	.word	0x0800415b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004144:	f7fe fd94 	bl	8002c70 <HAL_RCC_GetPCLK1Freq>
 8004148:	61f8      	str	r0, [r7, #28]
        break;
 800414a:	e010      	b.n	800416e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800414c:	4b90      	ldr	r3, [pc, #576]	@ (8004390 <UART_SetConfig+0x570>)
 800414e:	61fb      	str	r3, [r7, #28]
        break;
 8004150:	e00d      	b.n	800416e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004152:	f7fe fcf5 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 8004156:	61f8      	str	r0, [r7, #28]
        break;
 8004158:	e009      	b.n	800416e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800415a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800415e:	61fb      	str	r3, [r7, #28]
        break;
 8004160:	e005      	b.n	800416e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004162:	2300      	movs	r3, #0
 8004164:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800416c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 80fd 	beq.w	8004370 <UART_SetConfig+0x550>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	4613      	mov	r3, r2
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	4413      	add	r3, r2
 8004180:	69fa      	ldr	r2, [r7, #28]
 8004182:	429a      	cmp	r2, r3
 8004184:	d305      	bcc.n	8004192 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800418c:	69fa      	ldr	r2, [r7, #28]
 800418e:	429a      	cmp	r2, r3
 8004190:	d903      	bls.n	800419a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004198:	e0ea      	b.n	8004370 <UART_SetConfig+0x550>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	2200      	movs	r2, #0
 800419e:	461c      	mov	r4, r3
 80041a0:	4615      	mov	r5, r2
 80041a2:	f04f 0200 	mov.w	r2, #0
 80041a6:	f04f 0300 	mov.w	r3, #0
 80041aa:	022b      	lsls	r3, r5, #8
 80041ac:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80041b0:	0222      	lsls	r2, r4, #8
 80041b2:	68f9      	ldr	r1, [r7, #12]
 80041b4:	6849      	ldr	r1, [r1, #4]
 80041b6:	0849      	lsrs	r1, r1, #1
 80041b8:	2000      	movs	r0, #0
 80041ba:	4688      	mov	r8, r1
 80041bc:	4681      	mov	r9, r0
 80041be:	eb12 0a08 	adds.w	sl, r2, r8
 80041c2:	eb43 0b09 	adc.w	fp, r3, r9
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	603b      	str	r3, [r7, #0]
 80041ce:	607a      	str	r2, [r7, #4]
 80041d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041d4:	4650      	mov	r0, sl
 80041d6:	4659      	mov	r1, fp
 80041d8:	f7fb fff6 	bl	80001c8 <__aeabi_uldivmod>
 80041dc:	4602      	mov	r2, r0
 80041de:	460b      	mov	r3, r1
 80041e0:	4613      	mov	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041ea:	d308      	bcc.n	80041fe <UART_SetConfig+0x3de>
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041f2:	d204      	bcs.n	80041fe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	60da      	str	r2, [r3, #12]
 80041fc:	e0b8      	b.n	8004370 <UART_SetConfig+0x550>
        }
        else
        {
          ret = HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004204:	e0b4      	b.n	8004370 <UART_SetConfig+0x550>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800420e:	d15f      	bne.n	80042d0 <UART_SetConfig+0x4b0>
  {
    switch (clocksource)
 8004210:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004214:	2b08      	cmp	r3, #8
 8004216:	d828      	bhi.n	800426a <UART_SetConfig+0x44a>
 8004218:	a201      	add	r2, pc, #4	@ (adr r2, 8004220 <UART_SetConfig+0x400>)
 800421a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421e:	bf00      	nop
 8004220:	08004245 	.word	0x08004245
 8004224:	0800424d 	.word	0x0800424d
 8004228:	08004255 	.word	0x08004255
 800422c:	0800426b 	.word	0x0800426b
 8004230:	0800425b 	.word	0x0800425b
 8004234:	0800426b 	.word	0x0800426b
 8004238:	0800426b 	.word	0x0800426b
 800423c:	0800426b 	.word	0x0800426b
 8004240:	08004263 	.word	0x08004263
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004244:	f7fe fd14 	bl	8002c70 <HAL_RCC_GetPCLK1Freq>
 8004248:	61f8      	str	r0, [r7, #28]
        break;
 800424a:	e014      	b.n	8004276 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800424c:	f7fe fd26 	bl	8002c9c <HAL_RCC_GetPCLK2Freq>
 8004250:	61f8      	str	r0, [r7, #28]
        break;
 8004252:	e010      	b.n	8004276 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004254:	4b4e      	ldr	r3, [pc, #312]	@ (8004390 <UART_SetConfig+0x570>)
 8004256:	61fb      	str	r3, [r7, #28]
        break;
 8004258:	e00d      	b.n	8004276 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800425a:	f7fe fc71 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 800425e:	61f8      	str	r0, [r7, #28]
        break;
 8004260:	e009      	b.n	8004276 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004262:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004266:	61fb      	str	r3, [r7, #28]
        break;
 8004268:	e005      	b.n	8004276 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800426a:	2300      	movs	r3, #0
 800426c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004274:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d079      	beq.n	8004370 <UART_SetConfig+0x550>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	005a      	lsls	r2, r3, #1
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	085b      	lsrs	r3, r3, #1
 8004286:	441a      	add	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004290:	b29b      	uxth	r3, r3
 8004292:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	2b0f      	cmp	r3, #15
 8004298:	d916      	bls.n	80042c8 <UART_SetConfig+0x4a8>
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042a0:	d212      	bcs.n	80042c8 <UART_SetConfig+0x4a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	f023 030f 	bic.w	r3, r3, #15
 80042aa:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	085b      	lsrs	r3, r3, #1
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	8afb      	ldrh	r3, [r7, #22]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	8afa      	ldrh	r2, [r7, #22]
 80042c4:	60da      	str	r2, [r3, #12]
 80042c6:	e053      	b.n	8004370 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80042ce:	e04f      	b.n	8004370 <UART_SetConfig+0x550>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d828      	bhi.n	800432a <UART_SetConfig+0x50a>
 80042d8:	a201      	add	r2, pc, #4	@ (adr r2, 80042e0 <UART_SetConfig+0x4c0>)
 80042da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042de:	bf00      	nop
 80042e0:	08004305 	.word	0x08004305
 80042e4:	0800430d 	.word	0x0800430d
 80042e8:	08004315 	.word	0x08004315
 80042ec:	0800432b 	.word	0x0800432b
 80042f0:	0800431b 	.word	0x0800431b
 80042f4:	0800432b 	.word	0x0800432b
 80042f8:	0800432b 	.word	0x0800432b
 80042fc:	0800432b 	.word	0x0800432b
 8004300:	08004323 	.word	0x08004323
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004304:	f7fe fcb4 	bl	8002c70 <HAL_RCC_GetPCLK1Freq>
 8004308:	61f8      	str	r0, [r7, #28]
        break;
 800430a:	e014      	b.n	8004336 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800430c:	f7fe fcc6 	bl	8002c9c <HAL_RCC_GetPCLK2Freq>
 8004310:	61f8      	str	r0, [r7, #28]
        break;
 8004312:	e010      	b.n	8004336 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004314:	4b1e      	ldr	r3, [pc, #120]	@ (8004390 <UART_SetConfig+0x570>)
 8004316:	61fb      	str	r3, [r7, #28]
        break;
 8004318:	e00d      	b.n	8004336 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800431a:	f7fe fc11 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 800431e:	61f8      	str	r0, [r7, #28]
        break;
 8004320:	e009      	b.n	8004336 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004322:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004326:	61fb      	str	r3, [r7, #28]
        break;
 8004328:	e005      	b.n	8004336 <UART_SetConfig+0x516>
      default:
        pclk = 0U;
 800432a:	2300      	movs	r3, #0
 800432c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004334:	bf00      	nop
    }

    if (pclk != 0U)
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d019      	beq.n	8004370 <UART_SetConfig+0x550>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	085a      	lsrs	r2, r3, #1
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	441a      	add	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	fbb2 f3f3 	udiv	r3, r2, r3
 800434e:	b29b      	uxth	r3, r3
 8004350:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	2b0f      	cmp	r3, #15
 8004356:	d908      	bls.n	800436a <UART_SetConfig+0x54a>
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800435e:	d204      	bcs.n	800436a <UART_SetConfig+0x54a>
      {
        huart->Instance->BRR = usartdiv;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	60da      	str	r2, [r3, #12]
 8004368:	e002      	b.n	8004370 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->TxISR = NULL;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	665a      	str	r2, [r3, #100]	@ 0x64

  return ret;
 800437c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004380:	4618      	mov	r0, r3
 8004382:	3728      	adds	r7, #40	@ 0x28
 8004384:	46bd      	mov	sp, r7
 8004386:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800438a:	bf00      	nop
 800438c:	40008000 	.word	0x40008000
 8004390:	00f42400 	.word	0x00f42400

08004394 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00a      	beq.n	80043be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00a      	beq.n	80043e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e4:	f003 0304 	and.w	r3, r3, #4
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00a      	beq.n	8004402 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004406:	f003 0308 	and.w	r3, r3, #8
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00a      	beq.n	8004424 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	430a      	orrs	r2, r1
 8004422:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004428:	f003 0310 	and.w	r3, r3, #16
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00a      	beq.n	8004446 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444a:	f003 0320 	and.w	r3, r3, #32
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004470:	2b00      	cmp	r3, #0
 8004472:	d01a      	beq.n	80044aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004492:	d10a      	bne.n	80044aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00a      	beq.n	80044cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	430a      	orrs	r2, r1
 80044ca:	605a      	str	r2, [r3, #4]
  }
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af02      	add	r7, sp, #8
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80044e6:	f7fc fdbf 	bl	8001068 <HAL_GetTick>
 80044ea:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0308 	and.w	r3, r3, #8
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	d10e      	bne.n	8004518 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044fa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f82a 	bl	8004562 <UART_WaitOnFlagUntilTimeout>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e020      	b.n	800455a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0304 	and.w	r3, r3, #4
 8004522:	2b04      	cmp	r3, #4
 8004524:	d10e      	bne.n	8004544 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004526:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f814 	bl	8004562 <UART_WaitOnFlagUntilTimeout>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e00a      	b.n	800455a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2220      	movs	r2, #32
 8004548:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2220      	movs	r2, #32
 800454e:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UNLOCK(huart);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b084      	sub	sp, #16
 8004566:	af00      	add	r7, sp, #0
 8004568:	60f8      	str	r0, [r7, #12]
 800456a:	60b9      	str	r1, [r7, #8]
 800456c:	603b      	str	r3, [r7, #0]
 800456e:	4613      	mov	r3, r2
 8004570:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004572:	e05d      	b.n	8004630 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457a:	d059      	beq.n	8004630 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800457c:	f7fc fd74 	bl	8001068 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	429a      	cmp	r2, r3
 800458a:	d302      	bcc.n	8004592 <UART_WaitOnFlagUntilTimeout+0x30>
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d11b      	bne.n	80045ca <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 80045a0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689a      	ldr	r2, [r3, #8]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 0201 	bic.w	r2, r2, #1
 80045b0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2220      	movs	r2, #32
 80045b6:	675a      	str	r2, [r3, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2220      	movs	r2, #32
 80045bc:	679a      	str	r2, [r3, #120]	@ 0x78

        __HAL_UNLOCK(huart);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

        return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e042      	b.n	8004650 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0304 	and.w	r3, r3, #4
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d02b      	beq.n	8004630 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045e6:	d123      	bne.n	8004630 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80045f0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8004600:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0201 	bic.w	r2, r2, #1
 8004610:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2220      	movs	r2, #32
 8004616:	675a      	str	r2, [r3, #116]	@ 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2220      	movs	r2, #32
 800461c:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2220      	movs	r2, #32
 8004622:	67da      	str	r2, [r3, #124]	@ 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

          return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e00f      	b.n	8004650 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	69da      	ldr	r2, [r3, #28]
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	4013      	ands	r3, r2
 800463a:	68ba      	ldr	r2, [r7, #8]
 800463c:	429a      	cmp	r2, r3
 800463e:	bf0c      	ite	eq
 8004640:	2301      	moveq	r3, #1
 8004642:	2300      	movne	r3, #0
 8004644:	b2db      	uxtb	r3, r3
 8004646:	461a      	mov	r2, r3
 8004648:	79fb      	ldrb	r3, [r7, #7]
 800464a:	429a      	cmp	r2, r3
 800464c:	d092      	beq.n	8004574 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <memset>:
 8004658:	4402      	add	r2, r0
 800465a:	4603      	mov	r3, r0
 800465c:	4293      	cmp	r3, r2
 800465e:	d100      	bne.n	8004662 <memset+0xa>
 8004660:	4770      	bx	lr
 8004662:	f803 1b01 	strb.w	r1, [r3], #1
 8004666:	e7f9      	b.n	800465c <memset+0x4>

08004668 <__libc_init_array>:
 8004668:	b570      	push	{r4, r5, r6, lr}
 800466a:	4d0d      	ldr	r5, [pc, #52]	@ (80046a0 <__libc_init_array+0x38>)
 800466c:	4c0d      	ldr	r4, [pc, #52]	@ (80046a4 <__libc_init_array+0x3c>)
 800466e:	1b64      	subs	r4, r4, r5
 8004670:	10a4      	asrs	r4, r4, #2
 8004672:	2600      	movs	r6, #0
 8004674:	42a6      	cmp	r6, r4
 8004676:	d109      	bne.n	800468c <__libc_init_array+0x24>
 8004678:	4d0b      	ldr	r5, [pc, #44]	@ (80046a8 <__libc_init_array+0x40>)
 800467a:	4c0c      	ldr	r4, [pc, #48]	@ (80046ac <__libc_init_array+0x44>)
 800467c:	f000 f818 	bl	80046b0 <_init>
 8004680:	1b64      	subs	r4, r4, r5
 8004682:	10a4      	asrs	r4, r4, #2
 8004684:	2600      	movs	r6, #0
 8004686:	42a6      	cmp	r6, r4
 8004688:	d105      	bne.n	8004696 <__libc_init_array+0x2e>
 800468a:	bd70      	pop	{r4, r5, r6, pc}
 800468c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004690:	4798      	blx	r3
 8004692:	3601      	adds	r6, #1
 8004694:	e7ee      	b.n	8004674 <__libc_init_array+0xc>
 8004696:	f855 3b04 	ldr.w	r3, [r5], #4
 800469a:	4798      	blx	r3
 800469c:	3601      	adds	r6, #1
 800469e:	e7f2      	b.n	8004686 <__libc_init_array+0x1e>
 80046a0:	08004718 	.word	0x08004718
 80046a4:	08004718 	.word	0x08004718
 80046a8:	08004718 	.word	0x08004718
 80046ac:	0800471c 	.word	0x0800471c

080046b0 <_init>:
 80046b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b2:	bf00      	nop
 80046b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046b6:	bc08      	pop	{r3}
 80046b8:	469e      	mov	lr, r3
 80046ba:	4770      	bx	lr

080046bc <_fini>:
 80046bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046be:	bf00      	nop
 80046c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046c2:	bc08      	pop	{r3}
 80046c4:	469e      	mov	lr, r3
 80046c6:	4770      	bx	lr
